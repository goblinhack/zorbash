#!/bin/sh
#
# Copyright (C) 2014 Neil McGill
#
# This game is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This game is distributed in the hope that it will be fun,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this game; if not, write to the Free
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

. ./build/VERSION
. ./build/common.sh

OPT_UPDATE=

if [ ! -x zorbash ]; then
  RUNME
  if [ ! -x zorbash ]; then
    exit 1
  fi
fi

testme()
{
  for seed in \
    1 \
    2 \
    3 \
    4 \
    5 \
    6 \
    7 \
    8 \
    9 \
    10 \
    11 \
    12 \
    13 \
    14 \
    15 \
    16 \
    17 \
    18 \
    19 \
    20 \
    21 \
    22 \
    23 \
    24 \
    25 \
    26 \
    27 \
    28 \
    29 \
    30 \
    31 \
    32 \
    33 \
    34 \
    35 \
    36 \
    37 \
    38 \
    39 \
    40 \
    41 \
    42 \
    43 \
    44 \
    45 \
    46 \
    47 \
    48 \
    49 \
    50 \
    51 \
    52 \
    53 \
    54 \
    55 \
    56 \
    57 \
    58 \
    59 \
    60 \
    61 \
    62 \
    63 \
    64 \
    65 \
    66 \
    67 \
    68 \
    69 \
    70 \
    71 \
    72 \
    73 \
    74 \
    75 \
    76 \
    77 \
    78 \
    79 \
    80 \
    81 \
    82 \
    83 \
    84 \
    85 \
    86 \
    87 \
    88 \
    89 \
    90 \
    91 \
    92 \
    93 \
    94 \
    95 \
    96 \
    97 \
    98 \
    99 \
    100 \
    alphabase \
    dungeonspike \
    dwarvedelve \
    footpad \
    golemheights \
    apecastle \
    badmonkey \
    castlespire \
    cavemire \
    charliebats \
    deathpool \
    discobob \
    dogmanlives \
    donkeyking \
    drakestone \
    goblinhack \
    grayalien \
    hearthstone \
    hellfire \
    pondscum \
    seadragon \
    terrorlake \
    umbermonk \
    victimlake \
    zardoz
  do
    mkdir -p tests/$seed/output/
    mkdir -p tests/$seed/expected_output/

    printf "%-60s ... " "Running seed ($seed)"
    CMD="./zorbash $OPT_DEBUG --seed $seed --test-dungeon-gen --ascii --monochrome"
    $CMD > tests/$seed/output/console
    cp appdata/zorbash/stdout.txt tests/$seed/output/

    grep -q segv_handler appdata/zorbash/*
    if [ $? -eq 0 ]; then
      printf "$RED[%s]$RESET\n" "CRASH"
      echo Run the following to reproduce this:
      echo $CMD
      exit 1
    fi

    grep -q ERROR appdata/zorbash/*
    if [ $? -eq 0 ]; then
      printf "$RED[%s]$RESET\n" "ERROR"
      echo Run the following to reproduce this:
      echo $CMD
      exit 1
      continue
    fi

    # ls -lahsi tests/$seed/output/stdout.txt
    score=$(grep "End of test, score:" tests/$seed/output/stdout.txt | sed 's/.*://g')
    level=$(grep "End of test, level depth:" tests/$seed/output/stdout.txt | sed 's/.*://g')

    if [ ! -f tests/$seed/expected_output/stdout.txt ]; then
      cp -r tests/$seed/output/stdout.txt tests/$seed/expected_output/
      moves=$(grep "End of test, move count:" tests/$seed/output/stdout.txt | sed 's/.*://g')
      printf "$GREEN[%s]$RESET (%s moves, level %s, score %s)\n" "CREATED" $moves $level $score
    else
      diff -q tests/$seed/output/stdout.txt tests/$seed/expected_output/stdout.txt
      if [ $? -ne 0 ]; then
        moves=$(grep "End of test, move count:" tests/$seed/output/stdout.txt | sed 's/.*://g')
        expected_moves=$(grep "End of test, move count:" tests/$seed/expected_output/stdout.txt | sed 's/.*://g')
        printf "$RED[%s]$RESET (%s moves expected, found %s)\n" "CHANGED" $expected_moves $moves
        if [ "$OPT_UPDATE" = "yes" ]; then
          cp -r tests/$seed/output/stdout.txt tests/$seed/expected_output/
        fi
      else
        moves=$(grep "End of test, move count:" tests/$seed/output/stdout.txt | sed 's/.*://g')
        printf "$GREEN[%s]$RESET %s moves, level %s, score %s\n" "OK" $moves $level $score
      fi
    fi
  done
}

help()
{
    cat << %%
Build options:

Usage: $0 [options]

  [--update]  Update changed tests
  [--debug]   Enable debugs
  [--debug2]  Enable more debugs
%%
}

read_opts()
{
    while [ "$#" -ne 0 ];
    do
        option=$1

        case $option in
            -*update)
                OPT_UPDATE="yes"
                export OPT_UPDATE
                shift
                ;;
            -*debug2)
                OPT_DEBUG="--debug2"
                export OPT_DEBUG
                shift
                ;;
            -*debug)
                OPT_DEBUG="--debug"
                export OPT_DEBUG
                shift
                ;;
            *)
                help
                exit 1
                ;;
        esac
    done
}

read_opts "$@"

testme
