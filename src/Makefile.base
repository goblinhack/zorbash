
#
# For incremental builds, this is a lot faster
#
#ifeq ($(origin USE_PRECOMPILED),undefined)
#COMPILER_FLAGS+=-O0
#endif

NAME=zorbash
BUILD_DIR=.build

TARGET_GAME=$(NAME)$(EXE)
SRC_DIR=.

#
# To force clean and avoid "up to date" warning.
#
.PHONY: all clean clobber

all: $(TARGET_GAME)

SOURCES := $(wildcard *.cpp) $(wildcard *.S)
OBJECTS :=\
	$(addprefix $(BUILD_DIR)/,$(addsuffix .o,$(basename $(SOURCES))))

DEP_FILES := $(OBJECTS:.o=.d)
DEP_FLAGS = -MMD -MP

$(BUILD_DIR): ; mkdir -p $(BUILD_DIR)
$(OBJECTS): | $(BUILD_DIR)

PRECOMPILED_H := precompiled.hpp
PRECOMPILED_H_OBJ := $(PRECOMPILED_H).gch

#
# Must use the same flags as normal .cpp files for precompiled
#
%.hpp.gch: $(PRECOMPILED_H)
	$(CC) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<

#
# Precompiled headers are good for the initial build, but after that it
# is faster to use dependancies
#
ifeq ($(origin USE_PRECOMPILED),undefined)
$(BUILD_DIR)/%.o: %.cpp | $(PRECOMPILED_H_OBJ)
	$(CC) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<
else
$(BUILD_DIR)/%.o: %.cpp | $(PRECOMPILED_H_OBJ)
	$(CC) -include $(PRECOMPILED_H) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<
endif

$(BUILD_DIR)/%.o: %.S
	$(CC) $(DEP_FLAGS) -c -o $@ $<

$(TARGET_GAME): $(OBJECTS)
	cd $(BUILD_DIR); $(CC) $(LDFLAGS) $(notdir $(OBJECTS)) $(LDLIBS) -o $(TARGET_GAME); cp -f $(NAME)* ../..

tidy:
	# clang-tidy --list-checks -checks='*' | grep "modernize"
	@for src in $(SOURCES) ; do \
		echo "Running tidy on $$src..." ; \
		clang-tidy -fix -checks="-*,\
ang-tidy --list-checks -checks='*' | grep "modernize"  	modernize-use-auto,\
  		modernize-use-nullptr,\
			readability-else-after-return,\
			readability-simplify-boolean-expr,\
			readability-redundant-member-init,\
			modernize-use-default-member-init,\
			modernize-use-equals-default,\
			modernize-use-equals-delete,\
			modernize-loop-convert,\
			cppcoreguidelines-no-malloc,\
			misc-redundant-expression" \
			-header-filter=".*" \
			"$(SRC_DIR)/$$src" -- $(CFLAGS); \
	done
	@echo "Done"

.PHONY: style check-style tidy

clean:
	rm -f ../$(TARGET_GAME) ../stdout.txt ../stderr.txt
	rm -f $(TARGET_GAME) stdout.txt stderr.txt
	rm -rf $(BUILD_DIR)

clobber: clean
	rm -f ramdisk_data.cpp $(wildcard ramdisk_data*.S)

# delete corresponding object file if dependency file needs regeneration
$(BUILD_DIR)/%.d: ; @rm -f "$(@:.d=.o)"

# include all dependency files
-include $(DEP_FILES)
