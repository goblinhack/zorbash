
NAME=zorbash-game
BUILD_DIR=.build

TARGET_GAME=$(NAME)$(EXE)

#
# To force clean and avoid "up to date" warning.
#
.PHONY: all clean clobber

all: $(TARGET_GAME)

GAME_SOURCE := $(wildcard *.cpp) $(wildcard *.S)
GAME_OBJECTS :=\
	$(addprefix $(BUILD_DIR)/,$(addsuffix .o,$(basename $(GAME_SOURCE))))

DEP_FILES := $(GAME_OBJECTS:.o=.d)
DEP_FLAGS = -MMD -MP

$(BUILD_DIR): ; mkdir -p $(BUILD_DIR)
$(GAME_OBJECTS): | $(BUILD_DIR)

$(BUILD_DIR)/%.o: %.cpp
	$(CC) $(EXTRA_CFLAGS) $(CFLAGS) $(DEP_FLAGS) -c -o $@ $<

$(BUILD_DIR)/%.o: %.S
	$(CC) $(DEP_FLAGS) -c -o $@ $<

$(TARGET_GAME): $(GAME_OBJECTS)
	cd $(BUILD_DIR); $(CC) $(LDFLAGS) $(notdir $(GAME_OBJECTS)) $(LDLIBS) -o ../$(TARGET_GAME)
	cp -f $(TARGET_GAME) ..

clean:
	rm -f ../$(TARGET_GAME) ../stdout.txt ../stderr.txt
	rm -f $(TARGET_GAME) stdout.txt stderr.txt
	rm -rf $(BUILD_DIR)

clobber: clean
	rm -f ramdisk_data.cpp $(wildcard ramdisk_data*.S)

# delete corresponding object file if dependency file needs regeneration
$(BUILD_DIR)/%.d: ; @rm -f "$(@:.d=.o)"

# include all dependency files
-include $(DEP_FILES)
