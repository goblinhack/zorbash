//
// Copyright Neil McGill, goblinhack@gmail.com
//

#pragma once
#ifndef _MY_THING_TEMPLATE_H
#define _MY_THING_TEMPLATE_H

#include "my_dice.hpp"
#include "my_format_str_attribute.hpp"
#include "my_thing_defs.hpp"
#include "my_tile.hpp"
#include <map>
#include <set>

using Tpidmap   = std::vector< class Tp   *>;
using Tpnamemap = std::map< std::string, class Tp * >;
using Allies    = std::set< class Tp    *>;

enum {
  THING_RARITY_COMMON,
  THING_RARITY_UNCOMMON,
  THING_RARITY_RARE,
  THING_RARITY_VERY_RARE,
  THING_RARITY_UNIQUE,
};

class Tp
{
public:
  uint8_t z_depth {};
  uint8_t z_prio {};

  TpId id {};

  Allies allies;

  Tilemap bl1_tiles;
  Tilemap bl2_tiles;
  Tilemap bot1_tiles;
  Tilemap bot2_tiles;
  Tilemap bot3_tiles;
  Tilemap br1_tiles;
  Tilemap br2_tiles;
  Tilemap left1_tiles;
  Tilemap left2_tiles;
  Tilemap right1_tiles;
  Tilemap right2_tiles;
  Tilemap tiles;
  Tilemap tl1_tiles;
  Tilemap tl2_tiles;
  Tilemap top1_tiles;
  Tilemap top2_tiles;
  Tilemap tr1_tiles;
  Tilemap tr2_tiles;

private:
  bool _initial_temperature_set {};
  bool _temperature_min_set {};
  bool _temperature_max_set {};

  Dice _dmg_acid_dice {};
  Dice _dmg_bite_dice {};
  Dice _dmg_claw_dice {};
  Dice _dmg_cold_dice {};
  Dice _dmg_crush_dice {};
  Dice _dmg_impact_dice {};
  Dice _dmg_digest_dice {};
  Dice _dmg_drown_dice {};
  Dice _dmg_energy_dice {};
  Dice _dmg_fire_dice {};
  Dice _dmg_heat_dice {};
  Dice _dmg_lightning_dice {};
  Dice _dmg_magic_dice {};
  Dice _dmg_melee_dice {};
  Dice _dmg_missile_dice {};
  Dice _dmg_nat_att_dice {};
  Dice _dmg_necrosis_dice {};
  Dice _dmg_negation_dice {};
  Dice _dmg_stamina_dice {};
  Dice _dmg_poison_dice {};
  Dice _dmg_water_dice {};
  Dice _gold_value_dice {};
  Dice _health_initial_dice {};
  Dice _health_regenerate_amount_dice {};
  Dice _lifespan_dice {};
  Dice _nutrition_dice {};
  Dice _on_idle_tick_freq_dice {};
  Dice _resurrect_dice {};
  Dice _spawn_group_size_dice {};

  fsize _sz;

  std::vector< int > _dmg_chance_d1000_acid {};
  std::vector< int > _dmg_chance_d1000_water {};
  std::vector< int > _dmg_chance_d1000_cold {};
  std::vector< int > _dmg_chance_d1000_crush {};
  std::vector< int > _dmg_chance_d1000_impact {};
  std::vector< int > _dmg_chance_d1000_missile {};
  std::vector< int > _dmg_chance_d1000_digest {};
  std::vector< int > _dmg_chance_d1000_energy {};
  std::vector< int > _dmg_chance_d1000_negation {};
  std::vector< int > _dmg_chance_d1000_fire {};
  std::vector< int > _dmg_chance_d1000_heat {};
  std::vector< int > _dmg_chance_d1000_drown {};
  std::vector< int > _dmg_chance_d1000_bite {};
  std::vector< int > _dmg_chance_d1000_claw {};
  std::vector< int > _dmg_chance_d1000_lightning {};
  std::vector< int > _dmg_chance_d1000_melee {};
  std::vector< int > _dmg_chance_d1000_nat_att {};
  std::vector< int > _dmg_chance_d1000_necrosis {};
  std::vector< int > _dmg_chance_d1000_stamina_drain {};
  std::vector< int > _dmg_chance_d1000_magic_drain {};
  std::vector< int > _dmg_chance_d1000_poison {};

  // begin sort marker1 {
  int _aggression_pct {};
  int _ai_detect_secret_doors {};
  int _ai_resent_count {};
  int _ai_wanderer {};
  int _attack_blood {};
  int _attack_eater {};
  int _attack_humanoid {};
  int _attack_living {};
  int _attack_meat {};
  int _attack_no_msg {};
  int _attack_undead {};
  int _blast_min_radius {};
  int _blit_bot_off {};
  int _blit_left_off {};
  int _blit_off {};
  int _blit_right_off {};
  int _blit_top_off {};
  int _capacity_height {};
  int _capacity_width {};
  int _chance_d10000_crit {};
  int _chance_d10000_damaged {};
  int _chance_d10000_runic {};
  int _chance_d10000_set_on_fire {};
  int _chance_d1000_appearing {};
  int _chance_d1000_attack_engulf {};
  int _chance_d1000_carrier_of_treasure_class_A {};
  int _chance_d1000_carrier_of_treasure_class_B {};
  int _chance_d1000_carrier_of_treasure_class_C {};
  int _chance_d1000_carrier_of_weapon_class_A {};
  int _chance_d1000_carrier_of_weapon_class_B {};
  int _chance_d1000_carrier_of_weapon_class_C {};
  int _chance_d1000_grapple {};
  int _chance_d1000_jump_attack {};
  int _chance_d1000_jump_on_low_hp {};
  int _chance_d1000_jump_onto {};
  int _chance_d1000_jump_randomly {};
  int _chance_d1000_melting {};
  int _chance_d1000_regenerate {};
  int _chance_d1000_shooting {};
  int _chance_d1000_shooting_avoid_friends {};
  int _chance_d1000_shove {};
  int _chance_d1000_steal_item {};
  int _chance_d1000_tameable {};
  int _chance_d1000_teleport_attack {};
  int _chance_d1000_teleport_self {};
  int _charge_count {};
  int _collision_attack {};
  int _collision_check {};
  int _collision_hit_180 {};
  int _collision_hit_360 {};
  int _collision_hit_adj {};
  int _collision_hit_priority {};
  int _collision_hit_two_tiles_ahead {};
  int _consume_per_bite_amount {};
  int _distance_avoid {};
  int _distance_leader_max {};
  int _distance_minion_from_mob_max {};
  int _distance_minion_vision_shared {};
  int _distance_recruitment_max {};
  int _distance_spell_cast {};
  int _distance_throw {};
  int _distance_vision {};
  int _dmg_num_of_attacks {};
  int _dmg_received_doubled_from_acid {};
  int _dmg_received_doubled_from_cold {};
  int _dmg_received_doubled_from_fire {};
  int _dmg_received_doubled_from_necrosis {};
  int _dmg_received_doubled_from_poison {};
  int _dmg_received_doubled_from_water {};
  int _effect_has_blast_radius {};
  int _effect_radius {};
  int _enchant_level {};
  int _enchant_max {};
  int _environ_dislikes_acid {};
  int _environ_dislikes_cold {};
  int _environ_dislikes_fire {};
  int _environ_dislikes_necrosis {};
  int _environ_dislikes_poison {};
  int _environ_dislikes_water {};
  int _environ_hates_acid {};
  int _environ_hates_cold {};
  int _environ_hates_fire {};
  int _environ_hates_necrosis {};
  int _environ_hates_poison {};
  int _environ_hates_water {};
  int _environ_likes_deep_water {};
  int _environ_likes_lava {};
  int _environ_likes_shallow_water {};
  int _gfx_ascii_animated {};
  int _gfx_ascii_bg_color_spread_alpha {};
  int _gfx_ascii_bg_color_spread_blue {};
  int _gfx_ascii_bg_color_spread_green {};
  int _gfx_ascii_bg_color_spread_hue {};
  int _gfx_ascii_bg_color_spread_red {};
  int _gfx_ascii_color_bg_unchanged_by_lights {};
  int _gfx_ascii_color_fg_unchanged_by_lights {};
  int _gfx_ascii_color_is_animated {};
  int _gfx_ascii_fade_with_dist {};
  int _gfx_ascii_fg_color_spread_alpha {};
  int _gfx_ascii_fg_color_spread_blue {};
  int _gfx_ascii_fg_color_spread_green {};
  int _gfx_ascii_fg_color_spread_hue {};
  int _gfx_ascii_fg_color_spread_red {};
  int _gfx_ascii_shown {};
  int _gfx_ascii_shown_as_gray_in_shadow {};
  int _gfx_ascii_shown_in_bg {};
  int _gfx_glows {};
  int _gfx_on_fire_anim {};
  int _gfx_ooze {};
  int _gfx_pixelart_animated {};
  int _gfx_pixelart_animated_can_hflip {};
  int _gfx_pixelart_animated_can_vflip {};
  int _gfx_pixelart_animated_no_dir {};
  int _gfx_pixelart_anim_synced_with_owner {};
  int _gfx_pixelart_attack_anim {};
  int _gfx_pixelart_bounce_always {};
  int _gfx_pixelart_bounce_on_move {};
  int _gfx_pixelart_equip_carry_anim {};
  int _gfx_pixelart_flickers {};
  int _gfx_pixelart_health_bar_autohide {};
  int _gfx_pixelart_health_bar_only_when_awake {};
  int _gfx_pixelart_health_bar_shown {};
  int _gfx_pixelart_oversized_and_centered {};
  int _gfx_pixelart_oversized_and_on_floor {};
  int _gfx_pixelart_reflection {};
  int _gfx_pixelart_shadow {};
  int _gfx_pixelart_shadow_long {};
  int _gfx_pixelart_shadow_short {};
  int _gfx_pixelart_shadow_solid {};
  int _gfx_pixelart_shadow_very_short {};
  int _gfx_pixelart_show_asleep_anim {};
  int _gfx_pixelart_show_highlighted {};
  int _gfx_pixelart_shown_in_bg {};
  int _gfx_pixelart_show_outlined {};
  int _gfx_pixelart_show_square_outlined {};
  int _gfx_pixelart_submergible {};
  int _gfx_pixelart_wobbles_when_hit {};
  int _gfx_water {};
  int _has_temperature {};
  int _has_tentacles {};
  int _hunger_clock_tick_freq {};
  int _hunger_is_hunger_level_hungry_at_pct {};
  int _hunger_is_hunger_level_starving_at_pct {};
  int _hunger_is_insatiable {};
  int _initial_temperature {};
  int _internal_has_dir_anim {};
  int _internal_has_hp_anim {};
  int _is_able_to_amplify_footsteps {};
  int _is_able_to_attack_mobs {};
  int _is_able_to_attack_owner {};
  int _is_able_to_attack_totems {};
  int _is_able_to_be_equipped {};
  int _is_able_to_be_resurrected {};
  int _is_able_to_be_surprised {};
  int _is_able_to_be_teleported {};
  int _is_able_to_break_down_doors {};
  int _is_able_to_break_out_of_ice {};
  int _is_able_to_break_out_of_spell_of_holding {};
  int _is_able_to_break_out_of_webs {};
  int _is_able_to_change_levels {};
  int _is_able_to_collect_keys {};
  int _is_able_to_dampen_footsteps {};
  int _is_able_to_eat_poisonous_food {};
  int _is_able_to_eat_rotting_food {};
  int _is_able_to_eat_unpleasant_food {};
  int _is_able_to_enchant_items {};
  int _is_able_to_fall {};
  int _is_able_to_follow {};
  int _is_able_to_freeze {};
  int _is_able_to_grapple {};
  int _is_able_to_have_a_runic_inscribed {};
  int _is_able_to_jump {};
  int _is_able_to_jump_attack {};
  int _is_able_to_jump_escape {};
  int _is_able_to_jump_onto {};
  int _is_able_to_jump_without_tiring {};
  int _is_able_to_learn_skills {};
  int _is_able_to_learn_spells {};
  int _is_able_to_live_out_of_water {};
  int _is_able_to_lunge {};
  int _is_able_to_melt {};
  int _is_able_to_move_diagonally {};
  int _is_able_to_open_doors {};
  int _is_able_to_rage {};
  int _is_able_to_regenerate {};
  int _is_able_to_rest {};
  int _is_able_to_run_away_after_stealing {};
  int _is_able_to_see_in_magical_darkness {};
  int _is_able_to_see_in_the_dark {};
  int _is_able_to_see_invisible {};
  int _is_able_to_see_through_doors {};
  int _is_able_to_shoot_at {};
  int _is_able_to_shoot_at_close_range {};
  int _is_able_to_shove {};
  int _is_able_to_sleep {};
  int _is_able_to_spawn_things {};
  int _is_able_to_spell_cast {};
  int _is_able_to_swim {};
  int _is_able_to_teleport_attack {};
  int _is_able_to_teleport_escape {};
  int _is_able_to_teleport_self {};
  int _is_able_to_teleport_without_tiring {};
  int _is_able_to_tire {};
  int _is_able_to_use_amulet {};
  int _is_able_to_use_armor {};
  int _is_able_to_use_boots {};
  int _is_able_to_use_cloak {};
  int _is_able_to_use_gauntlet {};
  int _is_able_to_use_helmet {};
  int _is_able_to_use_ranged_weapons {};
  int _is_able_to_use_rings {};
  int _is_able_to_use_shield {};
  int _is_able_to_use_staffs {};
  int _is_able_to_use_weapons {};
  int _is_able_to_walk_through_walls {};
  int _is_acid {};
  int _is_aerodynamic {};
  int _is_air_breather {};
  int _is_alive_on_end_of_anim {};
  int _is_always_activated {};
  int _is_always_hit {};
  int _is_always_submerged_in_lava {};
  int _is_always_submerged_in_water {};
  int _is_amulet {};
  int _is_animation {};
  int _is_ant {};
  int _is_aquatic {};
  int _is_armor {};
  int _is_ascend_dungeon {};
  int _is_ascend_sewer {};
  int _is_asleep_initially {};
  int _is_attackable_by_magic {};
  int _is_attackable_by_monst {};
  int _is_attackable_by_player {};
  int _is_auto_activated {};
  int _is_auto_collect_item {};
  int _is_auto_equipped {};
  int _is_auto_throw {};
  int _is_auto_use {};
  int _is_bag {};
  int _is_bag_item {};
  int _is_bag_item_container {};
  int _is_bag_item_not_stackable {};
  int _is_barrel {};
  int _is_basalt {};
  int _is_bearowl {};
  int _is_bee {};
  int _is_biome_chasms {};
  int _is_biome_dungeon {};
  int _is_biome_flooded {};
  int _is_biome_ice {};
  int _is_biome_lava {};
  int _is_biome_sewer {};
  int _is_biome_swamp {};
  int _is_biome_unused {};
  int _is_bleeder {};
  int _is_block_of_ice {};
  int _is_bloodbug {};
  int _is_bones {};
  int _is_boots {};
  int _is_brazier {};
  int _is_bridge {};
  int _is_brittle {};
  int _is_buff {};
  int _is_burnable {};
  int _is_carnivorous_plant {};
  int _is_cautious {};
  int _is_centipede {};
  int _is_chasm {};
  int _is_cloak {};
  int _is_cold {};
  int _is_cold_elemental {};
  int _is_collectable {};
  int _is_collected_as_gold {};
  int _is_collected_as_keys {};
  int _is_combustible {};
  int _is_corpse_on_death {};
  int _is_corpse_with_bones {};
  int _is_corridor {};
  int _is_cowardly {};
  int _is_crab {};
  int _is_critical_to_level {};
  int _is_crushable {};
  int _is_crystal {};
  int _is_crystalline {};
  int _is_cursor {};
  int _is_cursor_can_hover_over {};
  int _is_cursor_can_hover_over_needs_confirm {};
  int _is_cursor_path {};
  int _is_cursor_path_blocker {};
  int _is_cursor_path_hazard {};
  int _is_dagger {};
  int _is_daring {};
  int _is_dead_on_end_of_anim {};
  int _is_dead_on_falling {};
  int _is_dead_on_shove {};
  int _is_death_hornet {};
  int _is_debuff {};
  int _is_debug_path {};
  int _is_debug_type {};
  int _is_deep_water {};
  int _is_demon {};
  int _is_descend_dungeon {};
  int _is_descend_sewer {};
  int _is_described_in_leftbar {};
  int _is_described_when_hovering_over {};
  int _is_destroyed_on_hit_or_miss {};
  int _is_destroyed_on_hitting {};
  int _is_dirt {};
  int _is_dog {};
  int _is_door {};
  int _is_drinkable {};
  int _is_droppable {};
  int _is_duck {};
  int _is_eater_of_amulets {};
  int _is_eater_of_armor {};
  int _is_eater_of_blood {};
  int _is_eater_of_boots {};
  int _is_eater_of_cloaks {};
  int _is_eater_of_foliage {};
  int _is_eater_of_food {};
  int _is_eater_of_fungus {};
  int _is_eater_of_gauntlets {};
  int _is_eater_of_grass {};
  int _is_eater_of_green_blood {};
  int _is_eater_of_helmets {};
  int _is_eater_of_magical_items {};
  int _is_eater_of_meat {};
  int _is_eater_of_plants {};
  int _is_eater_of_potions {};
  int _is_eater_of_red_blood {};
  int _is_eater_of_rings {};
  int _is_eater_of_shields {};
  int _is_eater_of_slime {};
  int _is_eater_of_staffs {};
  int _is_eater_of_treasure {};
  int _is_eater_of_weapons {};
  int _is_enchantable {};
  int _is_enchantable_as_a_group {};
  int _is_enchantstone {};
  int _is_engulfer {};
  int _is_ethereal {};
  int _is_ethereal_mob {};
  int _is_ettin {};
  int _is_exit_finder {};
  int _is_explorer {};
  int _is_explosion {};
  int _is_fairy {};
  int _is_fearless {};
  int _is_fire {};
  int _is_fire_elemental {};
  int _is_firefox {};
  int _is_flat {};
  int _is_floating {};
  int _is_floor {};
  int _is_floor_deco {};
  int _is_flying {};
  int _is_foliage {};
  int _is_food {};
  int _is_four_leaf_clover {};
  int _is_fungus {};
  int _is_fungus_edible {};
  int _is_fungus_healing {};
  int _is_fungus_poison {};
  int _is_fungus_withered {};
  int _is_gas_blocker {};
  int _is_gas_explosion_blocker {};
  int _is_gauntlet {};
  int _is_gelatinous {};
  int _is_glass {};
  int _is_gnome {};
  int _is_goat {};
  int _is_gold {};
  int _is_golem {};
  int _is_grass {};
  int _is_grass_dead {};
  int _is_grass_dry {};
  int _is_grass_dry_trampled {};
  int _is_grass_trampled {};
  int _is_grass_wet {};
  int _is_grass_wet_trampled {};
  int _is_green_blood {};
  int _is_green_blooded {};
  int _is_green_splatter {};
  int _is_hard {};
  int _is_hazard {};
  int _is_health_booster {};
  int _is_heavy {};
  int _is_hellpup {};
  int _is_helmet {};
  int _is_herbivore {};
  int _is_hittable {};
  int _is_holy {};
  int _is_holy_water {};
  int _is_humanoid {};
  int _is_iceman {};
  int _is_immune_to_acid {};
  int _is_immune_to_blinding {};
  int _is_immune_to_cold {};
  int _is_immune_to_confusion {};
  int _is_immune_to_electricity {};
  int _is_immune_to_fire {};
  int _is_immune_to_lightning {};
  int _is_immune_to_magic_drain {};
  int _is_immune_to_necrosis {};
  int _is_immune_to_negation {};
  int _is_immune_to_paralysis {};
  int _is_immune_to_poison {};
  int _is_immune_to_spell_of_beckoning {};
  int _is_immune_to_spell_of_holding {};
  int _is_immune_to_spell_of_repulsion {};
  int _is_immune_to_spell_of_slowing {};
  int _is_immune_to_spiderwebs {};
  int _is_immune_to_stamina_drain {};
  int _is_immune_to_teleport_attack {};
  int _is_immune_to_water {};
  int _is_intelligent {};
  int _is_interesting {}; // e.g. something edible or a monst or lava
  int _is_internal {};
  int _is_invisible {};
  int _is_item {};
  int _is_item_carrier {};
  int _is_item_carrier0 {};
  int _is_item_collector {};
  int _is_item_organic {};
  int _is_item_targeted {};
  int _is_kept_after_final_use {};
  int _is_key {};
  int _is_key_special {};
  int _is_laser {};
  int _is_lava {};
  int _is_leech {};
  int _is_lifeless {};
  int _is_light {};
  int _is_light_blocker {};
  int _is_light_blocker_for_monst {};
  int _is_lightning {};
  int _is_limb {};
  int _is_living {};
  int _is_loggable {};
  int _is_mace {};
  int _is_made_of_rock {};
  int _is_magical {};
  int _is_magical_effect {};
  int _is_magic_stone {};
  int _is_mantisman {};
  int _is_map_beast {};
  int _is_map_treasure {};
  int _is_meat {};
  int _is_metal {};
  int _is_mimic {};
  int _is_minion {};
  int _is_missile {};
  int _is_mob {};
  int _is_mob_class_A {};
  int _is_mob_class_B {};
  int _is_mob_class_C {};
  int _is_molekin {};
  int _is_monst {};
  int _is_monst_class_A {};
  int _is_monst_class_B {};
  int _is_monst_class_C {};
  int _is_monst_class_D {};
  int _is_monst_class_E {};
  int _is_monst_pack {};
  int _is_moveable {};
  int _is_msg {};
  int _is_msg_allowed_hears_something {};
  int _is_msg_allowed_is_dead {};
  int _is_msg_allowed_is_seen {};
  int _is_msg_allowed_is_surprised {};
  int _is_msg_allowed_is_wounded {};
  int _is_msg_allowed_senses_danger {};
  int _is_mummy {};
  int _is_necrotic_danger_level {};
  int _is_no_tile {};
  int _is_not_shown_as_a_pet {};
  int _is_obj_spawning {};
  int _is_obj_spawning_monst {};
  int _is_obs_ai {};
  int _is_obs_destructable {};
  int _is_obsidian {};
  int _is_obs_jump_end {};
  int _is_obs_jumping {};
  int _is_obs_shooting {};
  int _is_obs_shoving {};
  int _is_obs_spawn {};
  int _is_obs_spawn_monst {};
  int _is_obs_spell_casting {};
  int _is_obs_throwing {};
  int _is_obs_wall_or_door {};
  int _is_obs_when_dead {};
  int _is_ogre {};
  int _is_one_per_tile {};
  int _is_ooze {};
  int _is_openable {};
  int _is_organic {};
  int _is_pillar {};
  int _is_piranha {};
  int _is_plant {};
  int _is_player {};
  int _is_player_bodypart {};
  int _is_player_bodypart_eyes {};
  int _is_player_bodypart_face {};
  int _is_player_bodypart_hair {};
  int _is_player_bodypart_hat {};
  int _is_player_bodypart_legs {};
  int _is_player_bodypart_torso {};
  int _is_pointy {};
  int _is_poisonous_danger_level {};
  int _is_portal {};
  int _is_potion {};
  int _is_pressure_plate {};
  int _is_projectile {};
  int _is_ranged_weapon {};
  int _is_rat {};
  int _is_red_blood {};
  int _is_red_blooded {};
  int _is_red_splatter {};
  int _is_removable_if_out_of_slots {};
  int _is_ring {};
  int _is_ripple {};
  int _is_rock {};
  int _is_rock_ice {};
  int _is_rock_lava {};
  int _is_runic {};
  int _is_rusty {};
  int _is_scorpion {};
  int _is_secret_door {};
  int _is_sewer_wall {};
  int _is_shallow_water {};
  int _is_sheep {};
  int _is_shield {};
  int _is_shootable {};
  int _is_shovable {};
  int _is_shovable_and_sticky {};
  int _is_skeleton {};
  int _is_skill {};
  int _is_skillstone {};
  int _is_slime {};
  int _is_slippery {};
  int _is_smoke {};
  int _is_snake {};
  int _is_soft {};
  int _is_spectral_blade {};
  int _is_spell {};
  int _is_spellbook {};
  int _is_spell_of_beckoning {};
  int _is_spell_of_holding {};
  int _is_spell_of_holding_barrier {};
  int _is_spell_of_protection_barrier {};
  int _is_spell_of_repulsion {};
  int _is_spell_of_slowing {};
  int _is_spider {};
  int _is_spiderweb {};
  int _is_splatter {};
  int _is_staff {};
  int _is_steam {};
  int _is_sticky {};
  int _is_stone {};
  int _is_swimmer {};
  int _is_sword {};
  int _is_tameable {};
  int _is_target_radial {};
  int _is_target_select {};
  int _is_tentacle {};
  int _is_tentacleye {};
  int _is_the_grid {};
  int _is_thief {};
  int _is_throwable {};
  int _is_thrown_as_a_weapon {};
  int _is_thylacine {};
  int _is_tickable {}; // e.g. a monst or player or something moveable
  int _is_tireless {};
  int _is_tmp_thing {};
  int _is_torch {};
  int _is_totem {};
  int _is_trap {};
  int _is_treasure {};
  int _is_treasure_chest {};
  int _is_treasure_class_A {};
  int _is_treasure_class_B {};
  int _is_treasure_class_C {};
  int _is_treasure_type {};
  int _is_troll {};
  int _is_turret {};
  int _is_undead {};
  int _is_unused_flag1 {};
  int _is_unused_flag10 {};
  int _is_unused_flag11 {};
  int _is_unused_flag12 {};
  int _is_unused_flag124 {};
  int _is_unused_flag13 {};
  int _is_unused_flag14 {};
  int _is_unused_flag142 {};
  int _is_unused_flag15 {};
  int _is_unused_flag16 {};
  int _is_unused_flag17 {};
  int _is_unused_flag179 {};
  int _is_unused_flag18 {};
  int _is_unused_flag19 {};
  int _is_unused_flag192 {};
  int _is_unused_flag2 {};
  int _is_unused_flag20 {};
  int _is_unused_flag21 {};
  int _is_unused_flag22 {};
  int _is_unused_flag23 {};
  int _is_unused_flag24 {};
  int _is_unused_flag25 {};
  int _is_unused_flag26 {};
  int _is_unused_flag27 {};
  int _is_unused_flag28 {};
  int _is_unused_flag29 {};
  int _is_unused_flag3 {};
  int _is_unused_flag30 {};
  int _is_unused_flag31 {};
  int _is_unused_flag32 {};
  int _is_unused_flag33 {};
  int _is_unused_flag34 {};
  int _is_unused_flag35 {};
  int _is_unused_flag36 {};
  int _is_unused_flag37 {};
  int _is_unused_flag38 {};
  int _is_unused_flag39 {};
  int _is_unused_flag4 {};
  int _is_unused_flag40 {};
  int _is_unused_flag41 {};
  int _is_unused_flag42 {};
  int _is_unused_flag43 {};
  int _is_unused_flag44 {};
  int _is_unused_flag45 {};
  int _is_unused_flag46 {};
  int _is_unused_flag47 {};
  int _is_unused_flag48 {};
  int _is_unused_flag49 {};
  int _is_unused_flag5 {};
  int _is_unused_flag50 {};
  int _is_unused_flag51 {};
  int _is_unused_flag52 {};
  int _is_unused_flag53 {};
  int _is_unused_flag54 {};
  int _is_unused_flag55 {};
  int _is_unused_flag56 {};
  int _is_unused_flag57 {};
  int _is_unused_flag58 {};
  int _is_unused_flag59 {};
  int _is_unused_flag6 {};
  int _is_unused_flag60 {};
  int _is_unused_flag61 {};
  int _is_unused_flag62 {};
  int _is_unused_flag63 {};
  int _is_unused_flag64 {};
  int _is_unused_flag65 {};
  int _is_unused_flag66 {};
  int _is_unused_flag67 {};
  int _is_unused_flag68 {};
  int _is_unused_flag69 {};
  int _is_unused_flag7 {};
  int _is_unused_flag70 {};
  int _is_unused_flag71 {};
  int _is_unused_flag72 {};
  int _is_unused_flag73 {};
  int _is_unused_flag8 {};
  int _is_unused_flag9 {};
  int _is_usable {};
  int _is_usable_only_after_equipping {};
  int _is_used_when_thrown {};
  int _is_very_combustible {};
  int _is_very_hard {};
  int _is_very_heavy {};
  int _is_very_intelligent {};
  int _is_wall {};
  int _is_wall_dungeon {};
  int _is_warhammer {};
  int _is_weapon {};
  int _is_weapon_class_A {};
  int _is_weapon_class_B {};
  int _is_weapon_class_C {};
  int _is_wooden {};
  int _is_yeti {};
  int _is_zorblin {};
  int _item_height {};
  int _item_width {};
  int _jump_distance {};
  int _jump_distance_bonus {};
  int _light_dist {};
  int _magic {};
  int _magic_drain_on_using {};
  int _minion_limit {};
  int _move_speed {};
  int _move_speed_bonus {};
  int _noise_additional_on_jump_end {};
  int _noise_additional_on_teleporting {};
  int _noise_blocker {};
  int _noise_decibels_hearing {};
  int _noise_on_born {};
  int _noise_on_dropping {};
  int _noise_on_hit_and_now_dead {};
  int _noise_on_hit_and_still_alive {};
  int _noise_on_moving {};
  int _noise_on_open_or_close {};
  int _normal_placement_rules {};
  int _on_death_drop_all_items {};
  int _on_death_is_open {};
  int _on_death_is_stone {};
  int _range_max {};
  int _rarity {};
  int _shove_bonus {};
  int _shove_strength {};
  int _spawn_group_radius {};
  int _spell_cost {};
  int _stamina {};
  int _stamina_drain_on_attacking {};
  int _stamina_drain_on_using {};
  int _stat_att {};
  int _stat_att_bonus {};
  int _stat_att_penalty_when_idle {};
  int _stat_att_penalty_when_idle_max {};
  int _stat_att_penalty_when_in_deep_water {};
  int _stat_att_penalty_when_in_shallow_water {};
  int _stat_att_penalty_when_stuck {};
  int _stat_att_penalty_when_stuck_max {};
  int _stat_con {};
  int _stat_con_bonus {};
  int _stat_def {};
  int _stat_def_bonus {};
  int _stat_def_penalty_when_idle {};
  int _stat_def_penalty_when_idle_max {};
  int _stat_def_penalty_when_in_deep_water {};
  int _stat_def_penalty_when_in_shallow_water {};
  int _stat_def_penalty_when_stuck {};
  int _stat_def_penalty_when_stuck_max {};
  int _stat_dex {};
  int _stat_dex_bonus {};
  int _stat_int {};
  int _stat_int_bonus {};
  int _stat_luck {};
  int _stat_luck_bonus {};
  int _stat_psi {};
  int _stat_psi_bonus {};
  int _stats02 {};
  int _stats03 {};
  int _stats04 {};
  int _stats05 {};
  int _stats06 {};
  int _stats07 {};
  int _stats09 {};
  int _stat_str {};
  int _stat_str_bonus {};
  int _stat_str_min {};
  int _stat_thv {};
  int _stat_thv_bonus {};
  int _teleport_distance {};
  int _temperature_max {};
  int _temperature_min {};
  int _temperature_never_changes {};
  int _temperature_sensitive {};
  int _temperature_sensitive_to_sudden_changes {};
  int _temperature {TEMPERATURE_ROOM};
  int _thing_size {};
  int _tick_prio {};
  int _unused_chance1_d1000 {};
  int _unused_chance2_d1000 {};
  int _unused_chance3_d1000 {};
  int _unused_chance4_d1000 {};
  int _unused_chance5_d1000 {};
  int _unused_chance6_d1000 {};
  int _weapon_dmg {};
  int _weapon_use_distance {};
  // end sort marker1 }

  // begin sort marker2 {
  std::string _dmg_acid_dice_str;
  std::string _dmg_bite_dice_str;
  std::string _dmg_claw_dice_str;
  std::string _dmg_cold_dice_str;
  std::string _dmg_crush_dice_str;
  std::string _dmg_digest_dice_str;
  std::string _dmg_drown_dice_str;
  std::string _dmg_energy_dice_str;
  std::string _dmg_fire_dice_str;
  std::string _dmg_heat_dice_str;
  std::string _dmg_impact_dice_str;
  std::string _dmg_lightning_dice_str;
  std::string _dmg_magic_dice_str;
  std::string _dmg_melee_dice_str;
  std::string _dmg_missile_dice_str;
  std::string _dmg_nat_att_dice_str;
  std::string _dmg_nat_att_type;
  std::string _dmg_necrosis_dice_str;
  std::string _dmg_negation_dice_str;
  std::string _dmg_poison_dice_str;
  std::string _dmg_stamina_dice_str;
  std::string _dmg_water_dice_str;
  std::string _equip_carry_anim;
  std::string _gfx_anim_use;
  std::string _gfx_targeted_laser;
  std::string _gfx_targeted_projectile;
  std::string _gfx_targeted_radial;
  std::string _gold_value_dice_str;
  std::string _health_initial_dice_str;
  std::string _health_regenerate_amount_dice_str;
  std::string _is_allied_with;
  std::string _lifespan_dice_str;
  std::string _light_color;
  std::string _name;
  std::string _nutrition_dice_str;
  std::string _on_activated_do;
  std::string _on_attacking_dmg_acid_do;
  std::string _on_attacking_dmg_bite_do;
  std::string _on_attacking_dmg_claw_do;
  std::string _on_attacking_dmg_cold_do;
  std::string _on_attacking_dmg_crush_do;
  std::string _on_attacking_dmg_digest_do;
  std::string _on_attacking_dmg_drown_do;
  std::string _on_attacking_dmg_energy_do;
  std::string _on_attacking_dmg_fire_do;
  std::string _on_attacking_dmg_heat_do;
  std::string _on_attacking_dmg_impact_do;
  std::string _on_attacking_dmg_lightning_do;
  std::string _on_attacking_dmg_magic_do;
  std::string _on_attacking_dmg_melee_do;
  std::string _on_attacking_dmg_missile_do;
  std::string _on_attacking_dmg_nat_att_do;
  std::string _on_attacking_dmg_necrosis_do;
  std::string _on_attacking_dmg_negation_do;
  std::string _on_attacking_dmg_poison_do;
  std::string _on_attacking_dmg_stamina_do;
  std::string _on_attacking_dmg_stat_att_do;
  std::string _on_attacking_dmg_stat_con_do;
  std::string _on_attacking_dmg_stat_str_do;
  std::string _on_attacking_dmg_water_do;
  std::string _on_awake_do;
  std::string _on_born_do;
  std::string _on_close_do;
  std::string _on_death_do;
  std::string _on_death_of_a_follower_do;
  std::string _on_death_of_my_leader_do;
  std::string _on_dropped_do;
  std::string _on_enchant_do;
  std::string _on_enter_do;
  std::string _on_equip_do;
  std::string _on_fall_begin_do;
  std::string _on_fall_do;
  std::string _on_final_use_do;
  std::string _on_get_text_description_long_do;
  std::string _on_hit_and_now_dead_do;
  std::string _on_hit_and_still_alive_do;
  std::string _on_hit_dodge_do;
  std::string _on_idle_tick_freq_dice_str;
  std::string _on_jump_do;
  std::string _on_lifespan_tick_do;
  std::string _on_move_do;
  std::string _on_open_do;
  std::string _on_owner_add_do;
  std::string _on_owner_attack_dmg_acid_do;
  std::string _on_owner_attack_dmg_bite_do;
  std::string _on_owner_attack_dmg_claw_do;
  std::string _on_owner_attack_dmg_cold_do;
  std::string _on_owner_attack_dmg_crush_do;
  std::string _on_owner_attack_dmg_digest_do;
  std::string _on_owner_attack_dmg_drown_do;
  std::string _on_owner_attack_dmg_energy_do;
  std::string _on_owner_attack_dmg_fire_do;
  std::string _on_owner_attack_dmg_heat_do;
  std::string _on_owner_attack_dmg_impact_do;
  std::string _on_owner_attack_dmg_lightning_do;
  std::string _on_owner_attack_dmg_magic_do;
  std::string _on_owner_attack_dmg_melee_do;
  std::string _on_owner_attack_dmg_missile_do;
  std::string _on_owner_attack_dmg_nat_att_do;
  std::string _on_owner_attack_dmg_necrosis_do;
  std::string _on_owner_attack_dmg_negation_do;
  std::string _on_owner_attack_dmg_poison_do;
  std::string _on_owner_attack_dmg_stamina_do;
  std::string _on_owner_attack_dmg_stat_att_do;
  std::string _on_owner_attack_dmg_stat_con_do;
  std::string _on_owner_attack_dmg_stat_str_do;
  std::string _on_owner_attack_dmg_water_do;
  std::string _on_owner_receive_dmg_acid_do;
  std::string _on_owner_receive_dmg_bite_do;
  std::string _on_owner_receive_dmg_claw_do;
  std::string _on_owner_receive_dmg_cold_do;
  std::string _on_owner_receive_dmg_crush_do;
  std::string _on_owner_receive_dmg_digest_do;
  std::string _on_owner_receive_dmg_drown_do;
  std::string _on_owner_receive_dmg_energy_do;
  std::string _on_owner_receive_dmg_fire_do;
  std::string _on_owner_receive_dmg_heat_do;
  std::string _on_owner_receive_dmg_impact_do;
  std::string _on_owner_receive_dmg_lightning_do;
  std::string _on_owner_receive_dmg_magic_do;
  std::string _on_owner_receive_dmg_melee_do;
  std::string _on_owner_receive_dmg_missile_do;
  std::string _on_owner_receive_dmg_nat_att_do;
  std::string _on_owner_receive_dmg_necrosis_do;
  std::string _on_owner_receive_dmg_negation_do;
  std::string _on_owner_receive_dmg_poison_do;
  std::string _on_owner_receive_dmg_stamina_do;
  std::string _on_owner_receive_dmg_stat_att_do;
  std::string _on_owner_receive_dmg_stat_con_do;
  std::string _on_owner_receive_dmg_stat_str_do;
  std::string _on_owner_receive_dmg_water_do;
  std::string _on_owner_unset_do;
  std::string _on_polymorphed_do;
  std::string _on_pre_teleport_do;
  std::string _on_receiving_dmg_acid_do;
  std::string _on_receiving_dmg_bite_do;
  std::string _on_receiving_dmg_claw_do;
  std::string _on_receiving_dmg_cold_do;
  std::string _on_receiving_dmg_crush_do;
  std::string _on_receiving_dmg_digest_do;
  std::string _on_receiving_dmg_drown_do;
  std::string _on_receiving_dmg_energy_do;
  std::string _on_receiving_dmg_fire_do;
  std::string _on_receiving_dmg_heat_do;
  std::string _on_receiving_dmg_impact_do;
  std::string _on_receiving_dmg_lightning_do;
  std::string _on_receiving_dmg_magic_do;
  std::string _on_receiving_dmg_melee_do;
  std::string _on_receiving_dmg_missile_do;
  std::string _on_receiving_dmg_nat_att_do;
  std::string _on_receiving_dmg_necrosis_do;
  std::string _on_receiving_dmg_negation_do;
  std::string _on_receiving_dmg_poison_do;
  std::string _on_receiving_dmg_stamina_do;
  std::string _on_receiving_dmg_stat_att_do;
  std::string _on_receiving_dmg_stat_con_do;
  std::string _on_receiving_dmg_stat_str_do;
  std::string _on_receiving_dmg_water_do;
  std::string _on_resting_do;
  std::string _on_stealing_do;
  std::string _on_stuck_do;
  std::string _on_swing_do;
  std::string _on_targeted_do;
  std::string _on_targeted_radially_do;
  std::string _on_teleport_do;
  std::string _on_thrown_do;
  std::string _on_tick_do;
  std::string _on_tick_when_activated_do;
  std::string _on_tick_when_deactivated_do;
  std::string _on_unequip_do;
  std::string _on_use_do;
  std::string _on_use_skill_do;
  std::string _on_waiting_do;
  std::string _on_want_to_shoot_at_do;
  std::string _on_you_are_declared_a_follower_do;
  std::string _on_you_are_declared_leader_do;
  std::string _on_you_are_on_fire_do;
  std::string _on_you_nat_attack_attempt_do;
  std::string _on_you_nat_attack_success_do;
  std::string _resurrect_dice_str;
  std::string _skill_base_name;
  std::string _skill_replaces;
  std::string _spawn_group_size_dice_str;
  std::string _spawn_on_shoved;
  std::string _spell_base_name;
  std::string _spell_replaces;
  std::string _str1;
  std::string _str2;
  std::string _str4;
  std::string _text_a_or_an;
  std::string _text_debuff;
  std::string _text_description_enchant;
  std::string _text_description_long;
  std::string _text_description_long2;
  std::string _text_description_long3;
  std::string _text_description_long4;
  std::string _text_description_long5;
  std::string _text_description_short;
  std::string _text_description_very_short;
  std::string _text_hits;
  std::string _text_long_name;
  std::string _text_real_name;
  std::string _text_short_name;
  std::string _text_title;
  std::string _text_unused;
  std::string _text_unused1;
  std::string _text_unused2;
  std::string _text_unused3;
  // end sort marker2 }

public:
  Tp(void);
  ~Tp(void);

  bool is_disliked_by_me(class Level *, point p) const;
  bool is_hated_by_me(class Level *, point p) const;
  bool is_obs_ai(Thingp it);
  bool is_obs_ai_for_me(class Level *, point);
  bool can_eat(const Thingp itp);
  bool is_edible(const Thingp it);
  bool matches(const std::string &what);
  bool has_temperature(void);
  bool initial_temperature_is_set(void) const;
  bool temperature_min_is_set(void) const;
  bool temperature_max_is_set(void) const;

  void dbg_(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void err(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void err_(const char *fmt, va_list args); // compile error without
  void log(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void log_(const char *fmt, va_list args); // compile error without
  void topcon(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void topcon_(const char *fmt, va_list args); // compile error without
  void die(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void die_(const char *fmt, va_list args); // compile error without
  void con(const char *fmt, ...) CHECK_FORMAT_STR(printf, 2, 3);
  void con_(const char *fmt, va_list args); // compile error without

  const Dice &dmg_acid_dice(void) const;
  const Dice &dmg_water_dice(void) const;
  const Dice &dmg_nat_att_dice(void) const;
  const Dice &dmg_crush_dice(void) const;
  const Dice &dmg_impact_dice(void) const;
  const Dice &dmg_missile_dice(void) const;
  const Dice &dmg_digest_dice(void) const;
  const Dice &dmg_energy_dice(void) const;
  const Dice &dmg_negation_dice(void) const;
  const Dice &dmg_fire_dice(void) const;
  const Dice &dmg_heat_dice(void) const;
  const Dice &dmg_drown_dice(void) const;
  const Dice &dmg_bite_dice(void) const;
  const Dice &dmg_claw_dice(void) const;
  const Dice &dmg_cold_dice(void) const;
  const Dice &dmg_lightning_dice(void) const;
  const Dice &dmg_melee_dice(void) const;
  const Dice &dmg_necrosis_dice(void) const;
  const Dice &dmg_stamina_dice(void) const;
  const Dice &dmg_magic_dice(void) const;
  const Dice &dmg_poison_dice(void) const;
  const Dice &health_initial_dice(void) const;
  const Dice &health_regenerate_amount_dice(void) const;
  const Dice &gold_value_dice(void) const;
  const Dice &lifespan_dice(void) const;
  const Dice &nutrition_dice(void) const;
  const Dice &on_idle_tick_freq_dice(void) const;
  const Dice &resurrect_dice(void) const;
  const Dice &spawn_group_size_dice(void) const;

  const int cash(void) const;
  const int dmg_acid(void) const;
  const int dmg_water(void) const;
  const int dmg_nat_att(void) const;
  const int dmg_crush(void) const;
  const int dmg_impact(void) const;
  const int dmg_missile(void) const;
  const int dmg_digest(void) const;
  const int dmg_energy(void) const;
  const int dmg_negation(void) const;
  const int dmg_fire(void) const;
  const int dmg_heat(void) const;
  const int dmg_drown(void) const;
  const int dmg_bite(void) const;
  const int dmg_claw(void) const;
  const int dmg_cold(void) const;
  const int dmg_lightning(void) const;
  const int dmg_melee(void) const;
  const int dmg_necrosis(void) const;
  const int dmg_stamina(void) const;
  const int dmg_magic(void) const;
  const int dmg_poison(void) const;
  const int health_initial(void) const;
  const int health_initial_max_roll(void) const;
  const int health_regenerate_amount(void) const;
  const int health_regenerate_amount_max_roll(void) const;
  const int on_idle_tick_freq(void) const;
  const int spawn_group_size(void) const;
  const int lifespan(void) const;
  const int nutrition(void) const;
  const int resurrect(void) const;

  const Tilemap *tp_bl1_tiles(void) const;
  const Tilemap *tp_bl2_tiles(void) const;
  const Tilemap *tp_bot1_tiles(void) const;
  const Tilemap *tp_bot2_tiles(void) const;
  const Tilemap *tp_bot3_tiles(void) const;
  const Tilemap *tp_br1_tiles(void) const;
  const Tilemap *tp_br2_tiles(void) const;
  const Tilemap *tp_horiz_tiles(void) const;
  const Tilemap *tp_l180_tiles(void) const;
  const Tilemap *tp_l270_tiles(void) const;
  const Tilemap *tp_l90_tiles(void) const;
  const Tilemap *tp_left1_tiles(void) const;
  const Tilemap *tp_left2_tiles(void) const;
  const Tilemap *tp_l_tiles(void) const;
  const Tilemap *tp_outline_tiles(void) const;
  const Tilemap *tp_right1_tiles(void) const;
  const Tilemap *tp_right2_tiles(void) const;
  const Tilemap *tp_t180_tiles(void) const;
  const Tilemap *tp_t270_tiles(void) const;
  const Tilemap *tp_t90_tiles(void) const;
  const Tilemap *tp_tiles(void) const;
  const Tilemap *tp_tl1_tiles(void) const;
  const Tilemap *tp_tl2_tiles(void) const;
  const Tilemap *tp_top1_tiles(void) const;
  const Tilemap *tp_top2_tiles(void) const;
  const Tilemap *tp_tr1_tiles(void) const;
  const Tilemap *tp_tr2_tiles(void) const;
  const Tilemap *tp_t_tiles(void) const;
  const Tilemap *tp_vert_tiles(void) const;
  const Tilemap *tp_x_tiles(void) const;

  void dmg_acid_dice_set(const std::string &);
  void dmg_water_dice_set(const std::string &);
  void dmg_cold_dice_set(const std::string &);
  void dmg_crush_dice_set(const std::string &);
  void dmg_impact_dice_set(const std::string &);
  void dmg_missile_dice_set(const std::string &);
  void show_botcon_description(void);
  void dmg_digest_dice_set(const std::string &);
  void dmg_stamina_dice_set(const std::string &);
  void dmg_magic_dice_set(const std::string &);
  void dmg_energy_dice_set(const std::string &);
  void dmg_negation_dice_set(const std::string &);
  void dmg_fire_dice_set(const std::string &);
  void dmg_heat_dice_set(const std::string &);
  void dmg_drown_dice_set(const std::string &);
  void dmg_bite_dice_set(const std::string &);
  void dmg_claw_dice_set(const std::string &);
  void dmg_lightning_dice_set(const std::string &);
  void dmg_melee_dice_set(const std::string &);
  void dmg_nat_att_type_set(const std::string &);
  void dmg_nat_att_dice_set(const std::string &);
  void dmg_necrosis_dice_set(const std::string &);
  void dmg_poison_dice_set(const std::string &);
  void gold_value_dice_set(const std::string &);
  void health_initial_dice_set(const std::string &);
  void health_regenerate_amount_dice_set(const std::string &);
  void chance_d1000_regenerate_set(const std::string &);
  void lifespan_dice_set(const std::string &);
  void nutrition_dice_set(const std::string &);
  void on_idle_tick_freq_dice_set(const std::string &);
  void resurrect_dice_set(const std::string &);
  void spawn_group_size_dice_set(const std::string &);

  std::string text_short_capitalised(void) const;
  std::string text_long_capitalised(void) const;
  std::string text_a_or_an(void) const;
  std::string to_string(void);
  std::string to_short_string(void);

  // begin sort marker3 {
  const std::string &dmg_acid_dice_str(void) const;
  const std::string &dmg_bite_dice_str(void) const;
  const std::string &dmg_claw_dice_str(void) const;
  const std::string &dmg_cold_dice_str(void) const;
  const std::string &dmg_crush_dice_str(void) const;
  const std::string &dmg_digest_dice_str(void) const;
  const std::string &dmg_drown_dice_str(void) const;
  const std::string &dmg_energy_dice_str(void) const;
  const std::string &dmg_fire_dice_str(void) const;
  const std::string &dmg_heat_dice_str(void) const;
  const std::string &dmg_impact_dice_str(void) const;
  const std::string &dmg_lightning_dice_str(void) const;
  const std::string &dmg_magic_dice_str(void) const;
  const std::string &dmg_melee_dice_str(void) const;
  const std::string &dmg_missile_dice_str(void) const;
  const std::string &dmg_nat_att_dice_str(void) const;
  const std::string &dmg_nat_att_type(void) const;
  const std::string &dmg_necrosis_dice_str(void) const;
  const std::string &dmg_negation_dice_str(void) const;
  const std::string &dmg_poison_dice_str(void) const;
  const std::string &dmg_stamina_dice_str(void) const;
  const std::string &dmg_water_dice_str(void) const;
  const std::string &equip_carry_anim(void) const;
  const std::string &gfx_anim_use(void) const;
  const std::string &gfx_targeted_laser(void) const;
  const std::string &gfx_targeted_projectile(void) const;
  const std::string &gfx_targeted_radial(void) const;
  const std::string &gold_value_dice_str(void) const;
  const std::string &health_initial_dice_str(void) const;
  const std::string &health_regenerate_amount_dice_str(void) const;
  const std::string &is_allied_with(void) const;
  const std::string &lifespan_dice_str(void) const;
  const std::string &light_color(void) const;
  const std::string &name(void) const;
  const std::string &nutrition_dice_str(void) const;
  const std::string &on_activated_do(void) const;
  const std::string &on_attacking_dmg_acid_do(void) const;
  const std::string &on_attacking_dmg_bite_do(void) const;
  const std::string &on_attacking_dmg_claw_do(void) const;
  const std::string &on_attacking_dmg_cold_do(void) const;
  const std::string &on_attacking_dmg_crush_do(void) const;
  const std::string &on_attacking_dmg_digest_do(void) const;
  const std::string &on_attacking_dmg_drown_do(void) const;
  const std::string &on_attacking_dmg_energy_do(void) const;
  const std::string &on_attacking_dmg_fire_do(void) const;
  const std::string &on_attacking_dmg_heat_do(void) const;
  const std::string &on_attacking_dmg_impact_do(void) const;
  const std::string &on_attacking_dmg_lightning_do(void) const;
  const std::string &on_attacking_dmg_magic_do(void) const;
  const std::string &on_attacking_dmg_melee_do(void) const;
  const std::string &on_attacking_dmg_missile_do(void) const;
  const std::string &on_attacking_dmg_nat_att_do(void) const;
  const std::string &on_attacking_dmg_necrosis_do(void) const;
  const std::string &on_attacking_dmg_negation_do(void) const;
  const std::string &on_attacking_dmg_poison_do(void) const;
  const std::string &on_attacking_dmg_stamina_do(void) const;
  const std::string &on_attacking_dmg_stat_att_do(void) const;
  const std::string &on_attacking_dmg_stat_con_do(void) const;
  const std::string &on_attacking_dmg_stat_str_do(void) const;
  const std::string &on_attacking_dmg_water_do(void) const;
  const std::string &on_awake_do(void) const;
  const std::string &on_born_do(void) const;
  const std::string &on_close_do(void) const;
  const std::string &on_death_do(void) const;
  const std::string &on_death_of_a_follower_do(void) const;
  const std::string &on_death_of_my_leader_do(void) const;
  const std::string &on_dropped_do(void) const;
  const std::string &on_enchant_do(void) const;
  const std::string &on_enter_do(void) const;
  const std::string &on_equip_do(void) const;
  const std::string &on_fall_begin_do(void) const;
  const std::string &on_fall_do(void) const;
  const std::string &on_final_use_do(void) const;
  const std::string &on_get_text_description_long_do(void) const;
  const std::string &on_hit_and_now_dead_do(void) const;
  const std::string &on_hit_and_still_alive_do(void) const;
  const std::string &on_hit_dodge_do(void) const;
  const std::string &on_idle_tick_freq_dice_str(void) const;
  const std::string &on_jump_do(void) const;
  const std::string &on_lifespan_tick_do(void) const;
  const std::string &on_move_do(void) const;
  const std::string &on_open_do(void) const;
  const std::string &on_owner_add_do(void) const;
  const std::string &on_owner_attack_dmg_acid_do(void) const;
  const std::string &on_owner_attack_dmg_bite_do(void) const;
  const std::string &on_owner_attack_dmg_claw_do(void) const;
  const std::string &on_owner_attack_dmg_cold_do(void) const;
  const std::string &on_owner_attack_dmg_crush_do(void) const;
  const std::string &on_owner_attack_dmg_digest_do(void) const;
  const std::string &on_owner_attack_dmg_drown_do(void) const;
  const std::string &on_owner_attack_dmg_energy_do(void) const;
  const std::string &on_owner_attack_dmg_fire_do(void) const;
  const std::string &on_owner_attack_dmg_heat_do(void) const;
  const std::string &on_owner_attack_dmg_impact_do(void) const;
  const std::string &on_owner_attack_dmg_lightning_do(void) const;
  const std::string &on_owner_attack_dmg_magic_do(void) const;
  const std::string &on_owner_attack_dmg_melee_do(void) const;
  const std::string &on_owner_attack_dmg_missile_do(void) const;
  const std::string &on_owner_attack_dmg_nat_att_do(void) const;
  const std::string &on_owner_attack_dmg_necrosis_do(void) const;
  const std::string &on_owner_attack_dmg_negation_do(void) const;
  const std::string &on_owner_attack_dmg_poison_do(void) const;
  const std::string &on_owner_attack_dmg_stamina_do(void) const;
  const std::string &on_owner_attack_dmg_stat_att_do(void) const;
  const std::string &on_owner_attack_dmg_stat_con_do(void) const;
  const std::string &on_owner_attack_dmg_stat_str_do(void) const;
  const std::string &on_owner_attack_dmg_water_do(void) const;
  const std::string &on_owner_receive_dmg_acid_do(void) const;
  const std::string &on_owner_receive_dmg_bite_do(void) const;
  const std::string &on_owner_receive_dmg_claw_do(void) const;
  const std::string &on_owner_receive_dmg_cold_do(void) const;
  const std::string &on_owner_receive_dmg_crush_do(void) const;
  const std::string &on_owner_receive_dmg_digest_do(void) const;
  const std::string &on_owner_receive_dmg_drown_do(void) const;
  const std::string &on_owner_receive_dmg_energy_do(void) const;
  const std::string &on_owner_receive_dmg_fire_do(void) const;
  const std::string &on_owner_receive_dmg_heat_do(void) const;
  const std::string &on_owner_receive_dmg_impact_do(void) const;
  const std::string &on_owner_receive_dmg_lightning_do(void) const;
  const std::string &on_owner_receive_dmg_magic_do(void) const;
  const std::string &on_owner_receive_dmg_melee_do(void) const;
  const std::string &on_owner_receive_dmg_missile_do(void) const;
  const std::string &on_owner_receive_dmg_nat_att_do(void) const;
  const std::string &on_owner_receive_dmg_necrosis_do(void) const;
  const std::string &on_owner_receive_dmg_negation_do(void) const;
  const std::string &on_owner_receive_dmg_poison_do(void) const;
  const std::string &on_owner_receive_dmg_stamina_do(void) const;
  const std::string &on_owner_receive_dmg_stat_att_do(void) const;
  const std::string &on_owner_receive_dmg_stat_con_do(void) const;
  const std::string &on_owner_receive_dmg_stat_str_do(void) const;
  const std::string &on_owner_receive_dmg_water_do(void) const;
  const std::string &on_owner_unset_do(void) const;
  const std::string &on_polymorphed_do(void) const;
  const std::string &on_pre_teleport_do(void) const;
  const std::string &on_receiving_dmg_acid_do(void) const;
  const std::string &on_receiving_dmg_bite_do(void) const;
  const std::string &on_receiving_dmg_claw_do(void) const;
  const std::string &on_receiving_dmg_cold_do(void) const;
  const std::string &on_receiving_dmg_crush_do(void) const;
  const std::string &on_receiving_dmg_digest_do(void) const;
  const std::string &on_receiving_dmg_drown_do(void) const;
  const std::string &on_receiving_dmg_energy_do(void) const;
  const std::string &on_receiving_dmg_fire_do(void) const;
  const std::string &on_receiving_dmg_heat_do(void) const;
  const std::string &on_receiving_dmg_impact_do(void) const;
  const std::string &on_receiving_dmg_lightning_do(void) const;
  const std::string &on_receiving_dmg_magic_do(void) const;
  const std::string &on_receiving_dmg_melee_do(void) const;
  const std::string &on_receiving_dmg_missile_do(void) const;
  const std::string &on_receiving_dmg_nat_att_do(void) const;
  const std::string &on_receiving_dmg_necrosis_do(void) const;
  const std::string &on_receiving_dmg_negation_do(void) const;
  const std::string &on_receiving_dmg_poison_do(void) const;
  const std::string &on_receiving_dmg_stamina_do(void) const;
  const std::string &on_receiving_dmg_stat_att_do(void) const;
  const std::string &on_receiving_dmg_stat_con_do(void) const;
  const std::string &on_receiving_dmg_stat_str_do(void) const;
  const std::string &on_receiving_dmg_water_do(void) const;
  const std::string &on_resting_do(void) const;
  const std::string &on_stealing_do(void) const;
  const std::string &on_stuck_do(void) const;
  const std::string &on_swing_do(void) const;
  const std::string &on_targeted_do(void) const;
  const std::string &on_targeted_radially_do(void) const;
  const std::string &on_teleport_do(void) const;
  const std::string &on_thrown_do(void) const;
  const std::string &on_tick_do(void) const;
  const std::string &on_tick_when_activated_do(void) const;
  const std::string &on_tick_when_deactivated_do(void) const;
  const std::string &on_unequip_do(void) const;
  const std::string &on_use_do(void) const;
  const std::string &on_use_skill_do(void) const;
  const std::string &on_waiting_do(void) const;
  const std::string &on_want_to_shoot_at_do(void) const;
  const std::string &on_you_are_declared_a_follower_do(void) const;
  const std::string &on_you_are_declared_leader_do(void) const;
  const std::string &on_you_are_on_fire_do(void) const;
  const std::string &on_you_nat_attack_attempt_do(void) const;
  const std::string &on_you_nat_attack_success_do(void) const;
  const std::string &resurrect_dice_str(void) const;
  const std::string &skill_base_name(void) const;
  const std::string &skill_replaces(void) const;
  const std::string &spawn_group_size_dice_str(void) const;
  const std::string &spawn_on_shoved(void) const;
  const std::string &spell_base_name(void) const;
  const std::string &spell_replaces(void) const;
  const std::string &str1(void) const;
  const std::string &str2(void) const;
  const std::string &str4(void) const;
  const std::string &text_debuff(void) const;
  const std::string &text_description_enchant(void) const;
  const std::string &text_description_long2(void) const;
  const std::string &text_description_long3(void) const;
  const std::string &text_description_long4(void) const;
  const std::string &text_description_long5(void) const;
  const std::string &text_description_long(void) const;
  const std::string &text_description_short(void) const;
  const std::string &text_description_very_short(void) const;
  const std::string &text_hits(void) const;
  const std::string &text_long_name(void) const;
  const std::string &text_real_name(void) const;
  const std::string &text_short_name(void) const;
  const std::string &text_title(void) const;
  const std::string &text_unused1(void) const;
  const std::string &text_unused2(void) const;
  const std::string &text_unused3(void) const;
  const std::string &text_unused(void) const;
  // end sort marker3 }

  // begin sort marker4 {
  int aggression_pct(void) const;
  int ai_detect_secret_doors(void) const;
  int ai_resent_count(void) const;
  int ai_wanderer(void) const;
  int attack_blood(void) const;
  int attack_eater(void) const;
  int attack_humanoid(void) const;
  int attack_living(void) const;
  int attack_meat(void) const;
  int attack_no_msg(void) const;
  int attack_undead(void) const;
  int blast_min_radius(void) const;
  int blit_bot_off(void) const;
  int blit_left_off(void) const;
  int blit_right_off(void) const;
  int blit_top_off(void) const;
  int capacity_height(void) const;
  int capacity_width(void) const;
  int chance_d10000_crit(void) const;
  int chance_d10000_damaged(void) const;
  int chance_d10000_runic(void) const;
  int chance_d10000_set_on_fire(void) const;
  int chance_d1000_appearing(void) const;
  int chance_d1000_attack_engulf(void) const;
  int chance_d1000_carrier_of_treasure_class_A(void) const;
  int chance_d1000_carrier_of_treasure_class_B(void) const;
  int chance_d1000_carrier_of_treasure_class_C(void) const;
  int chance_d1000_carrier_of_weapon_class_A(void) const;
  int chance_d1000_carrier_of_weapon_class_B(void) const;
  int chance_d1000_carrier_of_weapon_class_C(void) const;
  int chance_d1000_grapple(void) const;
  int chance_d1000_jump_attack(void) const;
  int chance_d1000_jump_on_low_hp(void) const;
  int chance_d1000_jump_onto(void) const;
  int chance_d1000_jump_randomly(void) const;
  int chance_d1000_melting(void) const;
  int chance_d1000_regenerate(void) const;
  int chance_d1000_shooting_avoid_friends(void) const;
  int chance_d1000_shooting(void) const;
  int chance_d1000_shove(void) const;
  int chance_d1000_steal_item(void) const;
  int chance_d1000_tameable(void) const;
  int chance_d1000_teleport_attack(void) const;
  int chance_d1000_teleport_self(void) const;
  int charge_count(void) const;
  int collision_check(void) const;
  int collision_hit_180(void) const;
  int collision_hit_360(void) const;
  int collision_hit_adj(void) const;
  int collision_hit_priority(void) const;
  int collision_hit_two_tiles_ahead(void) const;
  int consume_per_bite_amount(void) const;
  int distance_avoid(void) const;
  int distance_leader_max(void) const;
  int distance_minion_from_mob_max(void) const;
  int distance_minion_vision_shared(void) const;
  int distance_recruitment_max(void) const;
  int distance_spell_cast(void) const;
  int distance_throw(void) const;
  int distance_vision(void) const;
  int dmg_chance_d1000_acid(int index) const;
  int dmg_chance_d1000_bite(int index) const;
  int dmg_chance_d1000_claw(int index) const;
  int dmg_chance_d1000_cold(int index) const;
  int dmg_chance_d1000_crush(int index) const;
  int dmg_chance_d1000_digest(int index) const;
  int dmg_chance_d1000_drown(int index) const;
  int dmg_chance_d1000_energy(int index) const;
  int dmg_chance_d1000_fire(int index) const;
  int dmg_chance_d1000_heat(int index) const;
  int dmg_chance_d1000_impact(int index) const;
  int dmg_chance_d1000_lightning(int index) const;
  int dmg_chance_d1000_magic_drain(int index) const;
  int dmg_chance_d1000_melee(int index) const;
  int dmg_chance_d1000_missile(int index) const;
  int dmg_chance_d1000_nat_att(int index) const;
  int dmg_chance_d1000_necrosis(int index) const;
  int dmg_chance_d1000_negation(int index) const;
  int dmg_chance_d1000_poison(int index) const;
  int dmg_chance_d1000_stamina_drain(int index) const;
  int dmg_chance_d1000_water(int index) const;
  int dmg_num_of_attacks(void) const;
  int dmg_received_doubled_from_acid(void) const;
  int dmg_received_doubled_from_cold(void) const;
  int dmg_received_doubled_from_fire(void) const;
  int dmg_received_doubled_from_necrosis(void) const;
  int dmg_received_doubled_from_poison(void) const;
  int dmg_received_doubled_from_water(void) const;
  int effect_has_blast_radius(void) const;
  int effect_radius(void) const;
  int enchant_max(void) const;
  int environ_dislikes_acid(void) const;
  int environ_dislikes_cold(void) const;
  int environ_dislikes_fire(void) const;
  int environ_dislikes_necrosis(void) const;
  int environ_dislikes_poison(void) const;
  int environ_dislikes_water(void) const;
  int environ_hates_acid(void) const;
  int environ_hates_cold(void) const;
  int environ_hates_fire(void) const;
  int environ_hates_necrosis(void) const;
  int environ_hates_poison(void) const;
  int environ_hates_water(void) const;
  int environ_likes_deep_water(void) const;
  int environ_likes_lava(void) const;
  int environ_likes_shallow_water(void) const;
  int get_danger_level(void);
  int gfx_ascii_animated(void) const;
  int gfx_ascii_bg_color_spread_alpha(void) const;
  int gfx_ascii_bg_color_spread_blue(void) const;
  int gfx_ascii_bg_color_spread_green(void) const;
  int gfx_ascii_bg_color_spread_hue(void) const;
  int gfx_ascii_bg_color_spread_red(void) const;
  int gfx_ascii_color_bg_unchanged_by_lights(void) const;
  int gfx_ascii_color_fg_unchanged_by_lights(void) const;
  int gfx_ascii_color_is_animated(void) const;
  int gfx_ascii_fade_with_dist(void) const;
  int gfx_ascii_fg_color_spread_alpha(void) const;
  int gfx_ascii_fg_color_spread_blue(void) const;
  int gfx_ascii_fg_color_spread_green(void) const;
  int gfx_ascii_fg_color_spread_hue(void) const;
  int gfx_ascii_fg_color_spread_red(void) const;
  int gfx_ascii_shown_as_gray_in_shadow(void) const;
  int gfx_ascii_shown_in_bg(void) const;
  int gfx_ascii_shown(void) const;
  int gfx_glows(void) const;
  int gfx_on_fire_anim(void) const;
  int gfx_ooze(void) const;
  int gfx_pixelart_animated_can_hflip(void) const;
  int gfx_pixelart_animated_can_vflip(void) const;
  int gfx_pixelart_animated_no_dir(void) const;
  int gfx_pixelart_anim_synced_with_owner(void) const;
  int gfx_pixelart_attack_anim(void) const;
  int gfx_pixelart_bounce_always(void) const;
  int gfx_pixelart_bounce_on_move(void) const;
  int gfx_pixelart_equip_carry_anim(void) const;
  int gfx_pixelart_flickers(void) const;
  int gfx_pixelart_health_bar_autohide(void) const;
  int gfx_pixelart_health_bar_only_when_awake(void) const;
  int gfx_pixelart_health_bar_shown(void) const;
  int gfx_pixelart_oversized_and_centered(void) const;
  int gfx_pixelart_oversized_and_on_floor(void) const;
  int gfx_pixelart_reflection(void) const;
  int gfx_pixelart_shadow_long(void) const;
  int gfx_pixelart_shadow_short(void) const;
  int gfx_pixelart_shadow_solid(void) const;
  int gfx_pixelart_shadow_very_short(void) const;
  int gfx_pixelart_shadow(void) const;
  int gfx_pixelart_show_asleep_anim(void) const;
  int gfx_pixelart_show_highlighted(void) const;
  int gfx_pixelart_shown_in_bg(void) const;
  int gfx_pixelart_show_outlined(void) const;
  int gfx_pixelart_show_square_outlined(void) const;
  int gfx_pixelart_submergible(void) const;
  int gfx_pixelart_wobbles_when_hit(void) const;
  int gfx_water(void) const;
  int has_tentacles(void) const;
  int hunger_clock_tick_freq(void) const;
  int hunger_is_hunger_level_hungry_at_pct(void) const;
  int hunger_is_hunger_level_starving_at_pct(void) const;
  int hunger_is_insatiable(void) const;
  int initial_temperature(void) const;
  int internal_has_dir_anim(void) const;
  int internal_has_hp_anim(void) const;
  int is_able_to_amplify_footsteps(void) const;
  int is_able_to_attack_mobs(void) const;
  int is_able_to_attack_owner(void) const;
  int is_able_to_attack_totems(void) const;
  int is_able_to_be_equipped(void) const;
  int is_able_to_be_resurrected(void) const;
  int is_able_to_be_surprised(void) const;
  int is_able_to_be_teleported(void) const;
  int is_able_to_break_down_doors(void) const;
  int is_able_to_break_out_of_ice(void) const;
  int is_able_to_break_out_of_spell_of_holding(void) const;
  int is_able_to_break_out_of_webs(void) const;
  int is_able_to_change_levels(void) const;
  int is_able_to_collect_keys(void) const;
  int is_able_to_dampen_footsteps(void) const;
  int is_able_to_eat_poisonous_food(void) const;
  int is_able_to_eat_rotting_food(void) const;
  int is_able_to_eat_unpleasant_food(void) const;
  int is_able_to_enchant_items(void) const;
  int is_able_to_fall(void) const;
  int is_able_to_follow(void) const;
  int is_able_to_freeze(void) const;
  int is_able_to_grapple(void) const;
  int is_able_to_have_a_runic_inscribed(void) const;
  int is_able_to_jump_attack(void) const;
  int is_able_to_jump_escape(void) const;
  int is_able_to_jump_onto(void) const;
  int is_able_to_jump(void) const;
  int is_able_to_jump_without_tiring(void) const;
  int is_able_to_learn_skills(void) const;
  int is_able_to_learn_spells(void) const;
  int is_able_to_live_out_of_water(void) const;
  int is_able_to_lunge(void) const;
  int is_able_to_melt(void) const;
  int is_able_to_move_diagonally(void) const;
  int is_able_to_open_doors(void) const;
  int is_able_to_rage(void) const;
  int is_able_to_regenerate(void) const;
  int is_able_to_rest(void) const;
  int is_able_to_run_away_after_stealing(void) const;
  int is_able_to_see_in_magical_darkness(void) const;
  int is_able_to_see_in_the_dark(void) const;
  int is_able_to_see_invisible(void) const;
  int is_able_to_see_through_doors(void) const;
  int is_able_to_shoot_at_close_range(void) const;
  int is_able_to_shoot_at(void) const;
  int is_able_to_shove(void) const;
  int is_able_to_sleep(void) const;
  int is_able_to_spawn_things(void) const;
  int is_able_to_spell_cast(void) const;
  int is_able_to_swim(void) const;
  int is_able_to_teleport_attack(void) const;
  int is_able_to_teleport_escape(void) const;
  int is_able_to_teleport_self(void) const;
  int is_able_to_teleport_without_tiring(void) const;
  int is_able_to_tire(void) const;
  int is_able_to_use_amulet(void) const;
  int is_able_to_use_armor(void) const;
  int is_able_to_use_boots(void) const;
  int is_able_to_use_cloak(void) const;
  int is_able_to_use_gauntlet(void) const;
  int is_able_to_use_helmet(void) const;
  int is_able_to_use_ranged_weapons(void) const;
  int is_able_to_use_rings(void) const;
  int is_able_to_use_shield(void) const;
  int is_able_to_use_staffs(void) const;
  int is_able_to_use_weapons(void) const;
  int is_able_to_walk_through_walls(void) const;
  int is_acid(void) const;
  int is_aerodynamic(void) const;
  int is_air_breather(void) const;
  int is_alive_on_end_of_anim(void) const;
  int is_always_activated(void) const;
  int is_always_hit(void) const;
  int is_always_submerged_in_lava(void) const;
  int is_always_submerged_in_water(void) const;
  int is_amulet(void) const;
  int is_animation(void) const;
  int is_ant(void) const;
  int is_aquatic(void) const;
  int is_armor(void) const;
  int is_ascend_dungeon(void) const;
  int is_ascend_sewer(void) const;
  int is_asleep_initially(void) const;
  int is_attackable_by_magic(void) const;
  int is_attackable_by_monst(void) const;
  int is_attackable_by_player(void) const;
  int is_auto_activated(void) const;
  int is_auto_collect_item(void) const;
  int is_auto_equipped(void) const;
  int is_auto_throw(void) const;
  int is_auto_use(void) const;
  int is_bag_item_container(void) const;
  int is_bag_item_not_stackable(void) const;
  int is_bag_item(void) const;
  int is_bag(void) const;
  int is_barrel(void) const;
  int is_basalt(void) const;
  int is_bearowl(void) const;
  int is_bee(void) const;
  int is_biome_chasms(void) const;
  int is_biome_dungeon(void) const;
  int is_biome_flooded(void) const;
  int is_biome_ice(void) const;
  int is_biome_lava(void) const;
  int is_biome_sewer(void) const;
  int is_biome_swamp(void) const;
  int is_biome_unused(void) const;
  int is_bleeder(void) const;
  int is_block_of_ice(void) const;
  int is_bloodbug(void) const;
  int is_bones(void) const;
  int is_boots(void) const;
  int is_brazier(void) const;
  int is_bridge(void) const;
  int is_brittle(void) const;
  int is_buff(void) const;
  int is_burnable(void) const;
  int is_carnivorous_plant(void) const;
  int is_cautious(void) const;
  int is_centipede(void) const;
  int is_chasm(void) const;
  int is_cloak(void) const;
  int is_cold_elemental(void) const;
  int is_cold(void) const;
  int is_collectable(void) const;
  int is_collected_as_gold(void) const;
  int is_collected_as_keys(void) const;
  int is_combustible(void) const;
  int is_corpse_on_death(void) const;
  int is_corpse_with_bones(void) const;
  int is_corridor(void) const;
  int is_cowardly(void) const;
  int is_crab(void) const;
  int is_critical_to_level(void) const;
  int is_crushable(void) const;
  int is_crystalline(void) const;
  int is_crystal(void) const;
  int is_cursor_can_hover_over_needs_confirm(void) const;
  int is_cursor_can_hover_over(void) const;
  int is_cursor_path_blocker(void) const;
  int is_cursor_path_hazard(void) const;
  int is_cursor_path(void) const;
  int is_cursor(void) const;
  int is_dagger(void) const;
  int is_daring(void) const;
  int is_dead_on_end_of_anim(void) const;
  int is_dead_on_falling(void) const;
  int is_dead_on_shove(void) const;
  int is_death_hornet(void) const;
  int is_debuff(void) const;
  int is_debug_path(void) const;
  int is_debug_type(void) const;
  int is_deep_water(void) const;
  int is_demon(void) const;
  int is_descend_dungeon(void) const;
  int is_descend_sewer(void) const;
  int is_described_in_leftbar(void) const;
  int is_described_when_hovering_over(void) const;
  int is_destroyed_on_hit_or_miss(void) const;
  int is_destroyed_on_hitting(void) const;
  int is_dirt(void) const;
  int is_dog(void) const;
  int is_door(void) const;
  int is_drinkable(void) const;
  int is_droppable(void) const;
  int is_duck(void) const;
  int is_eater_of_amulets(void) const;
  int is_eater_of_armor(void) const;
  int is_eater_of_blood(void) const;
  int is_eater_of_boots(void) const;
  int is_eater_of_cloaks(void) const;
  int is_eater_of_foliage(void) const;
  int is_eater_of_food(void) const;
  int is_eater_of_fungus(void) const;
  int is_eater_of_gauntlets(void) const;
  int is_eater_of_grass(void) const;
  int is_eater_of_green_blood(void) const;
  int is_eater_of_helmets(void) const;
  int is_eater_of_magical_items(void) const;
  int is_eater_of_meat(void) const;
  int is_eater_of_plants(void) const;
  int is_eater_of_potions(void) const;
  int is_eater_of_red_blood(void) const;
  int is_eater_of_rings(void) const;
  int is_eater_of_shields(void) const;
  int is_eater_of_slime(void) const;
  int is_eater_of_staffs(void) const;
  int is_eater_of_treasure(void) const;
  int is_eater_of_weapons(void) const;
  int is_enchantable_as_a_group(void) const;
  int is_enchantable(void) const;
  int is_enchantstone(void) const;
  int is_engulfer(void) const;
  int is_ethereal_mob(void) const;
  int is_ethereal(void) const;
  int is_ettin(void) const;
  int is_exit_finder(void) const;
  int is_explorer(void) const;
  int is_explosion(void) const;
  int is_fairy(void) const;
  int is_fearless(void) const;
  int is_fire_elemental(void) const;
  int is_firefox(void) const;
  int is_fire(void) const;
  int is_flat(void) const;
  int is_floating(void) const;
  int is_floor_deco(void) const;
  int is_floor(void) const;
  int is_flying(void) const;
  int is_foliage(void) const;
  int is_food(void) const;
  int is_four_leaf_clover(void) const;
  int is_fungus_edible(void) const;
  int is_fungus_healing(void) const;
  int is_fungus_poison(void) const;
  int is_fungus(void) const;
  int is_fungus_withered(void) const;
  int is_gas_blocker(void) const;
  int is_gas_explosion_blocker(void) const;
  int is_gauntlet(void) const;
  int is_gelatinous(void) const;
  int is_glass(void) const;
  int is_gnome(void) const;
  int is_goat(void) const;
  int is_gold(void) const;
  int is_golem(void) const;
  int is_grass_dead(void) const;
  int is_grass_dry_trampled(void) const;
  int is_grass_dry(void) const;
  int is_grass_trampled(void) const;
  int is_grass(void) const;
  int is_grass_wet_trampled(void) const;
  int is_grass_wet(void) const;
  int is_green_blooded(void) const;
  int is_green_blood(void) const;
  int is_green_splatter(void) const;
  int is_hard(void) const;
  int is_hazard(void) const;
  int is_health_booster(void) const;
  int is_heavy(void) const;
  int is_hellpup(void) const;
  int is_helmet(void) const;
  int is_herbivore(void) const;
  int is_hittable(void) const;
  int is_holy(void) const;
  int is_holy_water(void) const;
  int is_humanoid(void) const;
  int is_iceman(void) const;
  int is_immune_to_acid(void) const;
  int is_immune_to_blinding(void) const;
  int is_immune_to_cold(void) const;
  int is_immune_to_confusion(void) const;
  int is_immune_to_electricity(void) const;
  int is_immune_to_fire(void) const;
  int is_immune_to_lightning(void) const;
  int is_immune_to_magic_drain(void) const;
  int is_immune_to_necrosis(void) const;
  int is_immune_to_negation(void) const;
  int is_immune_to_paralysis(void) const;
  int is_immune_to_poison(void) const;
  int is_immune_to_spell_of_beckoning(void) const;
  int is_immune_to_spell_of_holding(void) const;
  int is_immune_to_spell_of_repulsion(void) const;
  int is_immune_to_spell_of_slowing(void) const;
  int is_immune_to_spiderwebs(void) const;
  int is_immune_to_stamina_drain(void) const;
  int is_immune_to_teleport_attack(void) const;
  int is_immune_to_water(void) const;
  int is_intelligent(void) const;
  int is_interesting(void) const;
  int is_internal(void) const;
  int is_invisible(void) const;
  int is_item_carrier(void) const;
  int is_item_collector(void) const;
  int is_item_organic(void) const;
  int is_item_targeted(void) const;
  int is_item(void) const;
  int is_kept_after_final_use(void) const;
  int is_key_special(void) const;
  int is_key(void) const;
  int is_laser(void) const;
  int is_lava(void) const;
  int is_leech(void) const;
  int is_lifeless(void) const;
  int is_light_blocker_for_monst(void) const;
  int is_light_blocker(void) const;
  int is_lightning(void) const;
  int is_light(void) const;
  int is_limb(void) const;
  int is_living(void) const;
  int is_loggable(void) const;
  int is_mace(void) const;
  int is_made_of_rock(void) const;
  int is_magical_effect(void) const;
  int is_magical(void) const;
  int is_magic_stone(void) const;
  int is_mantisman(void) const;
  int is_map_beast(void) const;
  int is_map_treasure(void) const;
  int is_meat(void) const;
  int is_metal(void) const;
  int is_mimic(void) const;
  int is_minion(void) const;
  int is_missile(void) const;
  int is_mob_class_A(void) const;
  int is_mob_class_B(void) const;
  int is_mob_class_C(void) const;
  int is_mob(void) const;
  int is_molekin(void) const;
  int is_monst_class_A(void) const;
  int is_monst_class_B(void) const;
  int is_monst_class_C(void) const;
  int is_monst_class_D(void) const;
  int is_monst_class_E(void) const;
  int is_monst_pack(void) const;
  int is_monst(void) const;
  int is_moveable(void) const;
  int is_msg_allowed_hears_something(void) const;
  int is_msg_allowed_is_dead(void) const;
  int is_msg_allowed_is_seen(void) const;
  int is_msg_allowed_is_surprised(void) const;
  int is_msg_allowed_is_wounded(void) const;
  int is_msg_allowed_senses_danger(void) const;
  int is_msg(void) const;
  int is_mummy(void) const;
  int is_necrotic_danger_level(void) const;
  int is_no_tile(void) const;
  int is_not_shown_as_a_pet(void) const;
  int is_obj_spawning_monst(void) const;
  int is_obj_spawning(void) const;
  int is_obs_ai(void) const;
  int is_obs_destructable(void) const;
  int is_obsidian(void) const;
  int is_obs_jump_end(void) const;
  int is_obs_jumping(void) const;
  int is_obs_shooting(void) const;
  int is_obs_shoving(void) const;
  int is_obs_spawn_monst(void) const;
  int is_obs_spawn(void) const;
  int is_obs_spell_casting(void) const;
  int is_obs_throwing(void) const;
  int is_obs_wall_or_door(void) const;
  int is_obs_when_dead(void) const;
  int is_ogre(void) const;
  int is_one_per_tile(void) const;
  int is_ooze(void) const;
  int is_openable(void) const;
  int is_organic(void) const;
  int is_pillar(void) const;
  int is_piranha(void) const;
  int is_plant(void) const;
  int is_player_bodypart_eyes(void) const;
  int is_player_bodypart_face(void) const;
  int is_player_bodypart_hair(void) const;
  int is_player_bodypart_hat(void) const;
  int is_player_bodypart_legs(void) const;
  int is_player_bodypart_torso(void) const;
  int is_player_bodypart(void) const;
  int is_player(void) const;
  int is_pointy(void) const;
  int is_poisonous_danger_level(void) const;
  int is_portal(void) const;
  int is_potion(void) const;
  int is_pressure_plate(void) const;
  int is_projectile(void) const;
  int is_ranged_weapon(void) const;
  int is_rat(void) const;
  int is_red_blooded(void) const;
  int is_red_blood(void) const;
  int is_red_splatter(void) const;
  int is_removable_if_out_of_slots(void) const;
  int is_ring(void) const;
  int is_ripple(void) const;
  int is_rock_ice(void) const;
  int is_rock_lava(void) const;
  int is_rock(void) const;
  int is_runic(void) const;
  int is_rusty(void) const;
  int is_scorpion(void) const;
  int is_secret_door(void) const;
  int is_sewer_wall(void) const;
  int is_shallow_water(void) const;
  int is_sheep(void) const;
  int is_shield(void) const;
  int is_shootable(void) const;
  int is_shovable_and_sticky(void) const;
  int is_shovable(void) const;
  int is_skeleton(void) const;
  int is_skillstone(void) const;
  int is_skill(void) const;
  int is_slime(void) const;
  int is_slippery(void) const;
  int is_smoke(void) const;
  int is_snake(void) const;
  int is_soft(void) const;
  int is_spectral_blade(void) const;
  int is_spellbook(void) const;
  int is_spell_of_beckoning(void) const;
  int is_spell_of_holding_barrier(void) const;
  int is_spell_of_holding(void) const;
  int is_spell_of_protection_barrier(void) const;
  int is_spell_of_repulsion(void) const;
  int is_spell_of_slowing(void) const;
  int is_spell(void) const;
  int is_spider(void) const;
  int is_spiderweb(void) const;
  int is_splatter(void) const;
  int is_staff(void) const;
  int is_steam(void) const;
  int is_sticky(void) const;
  int is_stone(void) const;
  int is_swimmer(void) const;
  int is_sword(void) const;
  int is_tameable(void) const;
  int is_target_radial(void) const;
  int is_target_select(void) const;
  int is_tentacle(void) const;
  int is_tentacleye(void) const;
  int is_the_grid(void) const;
  int is_thief(void) const;
  int is_throwable(void) const;
  int is_thrown_as_a_weapon(void) const;
  int is_thylacine(void) const;
  int is_tickable(void) const;
  int is_tireless(void) const;
  int is_tmp_thing(void) const;
  int is_torch(void) const;
  int is_totem(void) const;
  int is_trap(void) const;
  int is_treasure_chest(void) const;
  int is_treasure_class_A(void) const;
  int is_treasure_class_B(void) const;
  int is_treasure_class_C(void) const;
  int is_treasure_type(void) const;
  int is_treasure(void) const;
  int is_troll(void) const;
  int is_turret(void) const;
  int is_undead(void) const;
  int is_unused_flag10(void) const;
  int is_unused_flag11(void) const;
  int is_unused_flag124(void) const;
  int is_unused_flag12(void) const;
  int is_unused_flag13(void) const;
  int is_unused_flag142(void) const;
  int is_unused_flag14(void) const;
  int is_unused_flag15(void) const;
  int is_unused_flag16(void) const;
  int is_unused_flag179(void) const;
  int is_unused_flag17(void) const;
  int is_unused_flag18(void) const;
  int is_unused_flag192(void) const;
  int is_unused_flag19(void) const;
  int is_unused_flag1(void) const;
  int is_unused_flag20(void) const;
  int is_unused_flag21(void) const;
  int is_unused_flag22(void) const;
  int is_unused_flag23(void) const;
  int is_unused_flag24(void) const;
  int is_unused_flag25(void) const;
  int is_unused_flag26(void) const;
  int is_unused_flag27(void) const;
  int is_unused_flag28(void) const;
  int is_unused_flag29(void) const;
  int is_unused_flag2(void) const;
  int is_unused_flag30(void) const;
  int is_unused_flag31(void) const;
  int is_unused_flag32(void) const;
  int is_unused_flag33(void) const;
  int is_unused_flag34(void) const;
  int is_unused_flag35(void) const;
  int is_unused_flag36(void) const;
  int is_unused_flag37(void) const;
  int is_unused_flag38(void) const;
  int is_unused_flag39(void) const;
  int is_unused_flag3(void) const;
  int is_unused_flag40(void) const;
  int is_unused_flag41(void) const;
  int is_unused_flag42(void) const;
  int is_unused_flag43(void) const;
  int is_unused_flag44(void) const;
  int is_unused_flag45(void) const;
  int is_unused_flag46(void) const;
  int is_unused_flag47(void) const;
  int is_unused_flag48(void) const;
  int is_unused_flag49(void) const;
  int is_unused_flag4(void) const;
  int is_unused_flag50(void) const;
  int is_unused_flag51(void) const;
  int is_unused_flag52(void) const;
  int is_unused_flag53(void) const;
  int is_unused_flag54(void) const;
  int is_unused_flag55(void) const;
  int is_unused_flag56(void) const;
  int is_unused_flag57(void) const;
  int is_unused_flag58(void) const;
  int is_unused_flag59(void) const;
  int is_unused_flag5(void) const;
  int is_unused_flag60(void) const;
  int is_unused_flag61(void) const;
  int is_unused_flag62(void) const;
  int is_unused_flag63(void) const;
  int is_unused_flag64(void) const;
  int is_unused_flag65(void) const;
  int is_unused_flag66(void) const;
  int is_unused_flag67(void) const;
  int is_unused_flag68(void) const;
  int is_unused_flag69(void) const;
  int is_unused_flag6(void) const;
  int is_unused_flag70(void) const;
  int is_unused_flag71(void) const;
  int is_unused_flag72(void) const;
  int is_unused_flag73(void) const;
  int is_unused_flag7(void) const;
  int is_unused_flag8(void) const;
  int is_unused_flag9(void) const;
  int is_usable_only_after_equipping(void) const;
  int is_usable(void) const;
  int is_used_when_thrown(void) const;
  int is_very_combustible(void) const;
  int is_very_hard(void) const;
  int is_very_heavy(void) const;
  int is_very_intelligent(void) const;
  int is_wall_dungeon(void) const;
  int is_wall(void) const;
  int is_warhammer(void) const;
  int is_weapon_class_A(void) const;
  int is_weapon_class_B(void) const;
  int is_weapon_class_C(void) const;
  int is_weapon(void) const;
  int is_wooden(void) const;
  int is_yeti(void) const;
  int is_zorblin(void) const;
  int item_height(void) const;
  int item_width(void) const;
  int jump_distance_bonus(void) const;
  int jump_distance(void) const;
  int light_dist(void) const;
  int magic_drain_on_using(void) const;
  int magic(void) const;
  int minion_limit(void) const;
  int move_speed_bonus(void) const;
  int move_speed(void) const;
  int noise_additional_on_jump_end(void) const;
  int noise_additional_on_teleporting(void) const;
  int noise_blocker(void) const;
  int noise_decibels_hearing(void) const;
  int noise_on_born(void) const;
  int noise_on_dropping(void) const;
  int noise_on_hit_and_now_dead(void) const;
  int noise_on_hit_and_still_alive(void) const;
  int noise_on_moving(void) const;
  int noise_on_open_or_close(void) const;
  int normal_placement_rules(void) const;
  int on_death_drop_all_items(void) const;
  int on_death_is_open(void) const;
  int on_death_is_stone(void) const;
  int range_max(void) const;
  int rarity(void) const;
  int shove_bonus(void) const;
  int shove_strength(void) const;
  int spawn_group_radius(void) const;
  int spell_cost(void) const;
  int stamina_drain_on_attacking(void) const;
  int stamina_drain_on_using(void) const;
  int stamina(void) const;
  int stat_att_bonus(void) const;
  int stat_att_penalty_when_idle_max(void) const;
  int stat_att_penalty_when_idle(void) const;
  int stat_att_penalty_when_in_deep_water(void) const;
  int stat_att_penalty_when_in_shallow_water(void) const;
  int stat_att_penalty_when_stuck_max(void) const;
  int stat_att_penalty_when_stuck(void) const;
  int stat_att(void) const;
  int stat_con_bonus(void) const;
  int stat_con(void) const;
  int stat_def_bonus(void) const;
  int stat_def_penalty_when_idle_max(void) const;
  int stat_def_penalty_when_idle(void) const;
  int stat_def_penalty_when_in_deep_water(void) const;
  int stat_def_penalty_when_in_shallow_water(void) const;
  int stat_def_penalty_when_stuck_max(void) const;
  int stat_def_penalty_when_stuck(void) const;
  int stat_def(void) const;
  int stat_dex_bonus(void) const;
  int stat_dex(void) const;
  int stat_int_bonus(void) const;
  int stat_int(void) const;
  int stat_luck_bonus(void) const;
  int stat_luck(void) const;
  int stat_psi_bonus(void) const;
  int stat_psi(void) const;
  int stats02(void) const;
  int stats03(void) const;
  int stats04(void) const;
  int stats05(void) const;
  int stats06(void) const;
  int stats07(void) const;
  int stats09(void) const;
  int stat_str_bonus(void) const;
  int stat_str_min(void) const;
  int stat_str(void) const;
  int stat_thv_bonus(void) const;
  int stat_thv(void) const;
  int teleport_distance(void) const;
  int temperature_max(void) const;
  int temperature_min(void) const;
  int temperature_never_changes(void) const;
  int temperature_sensitive_to_sudden_changes(void) const;
  int temperature_sensitive(void) const;
  int temperature(void) const;
  int thing_size(void) const;
  int tick_prio(void) const;
  int unused_chance1_d1000(void) const;
  int unused_chance2_d1000(void) const;
  int unused_chance3_d1000(void) const;
  int unused_chance4_d1000(void) const;
  int unused_chance5_d1000(void) const;
  int unused_chance6_d1000(void) const;
  int weapon_dmg(void) const;
  // end sort marker4 }

  // begin sort marker5 {
  void aggression_pct_set(int v);
  void ai_detect_secret_doors_set(int v);
  void ai_resent_count_set(int v);
  void ai_wanderer_set(int v);
  void attack_blood_set(int v);
  void attack_eater_set(int v);
  void attack_humanoid_set(int v);
  void attack_living_set(int v);
  void attack_meat_set(int v);
  void attack_no_msg_set(int v);
  void attack_undead_set(int v);
  void blast_min_radius_set(int v);
  void blit_bot_off_set(int v);
  void blit_left_off_set(int v);
  void blit_right_off_set(int v);
  void blit_top_off_set(int v);
  void capacity_height_set(int v);
  void capacity_width_set(int v);
  void chance_d10000_crit_set(int v);
  void chance_d10000_damaged_set(int v);
  void chance_d10000_runic_set(int v);
  void chance_d10000_set_on_fire_set(int v);
  void chance_d1000_appearing_set(int v);
  void chance_d1000_attack_engulf_set(int v);
  void chance_d1000_carrier_of_treasure_class_A_set(int v);
  void chance_d1000_carrier_of_treasure_class_B_set(int v);
  void chance_d1000_carrier_of_treasure_class_C_set(int v);
  void chance_d1000_carrier_of_weapon_class_A_set(int v);
  void chance_d1000_carrier_of_weapon_class_B_set(int v);
  void chance_d1000_carrier_of_weapon_class_C_set(int v);
  void chance_d1000_grapple_set(int v);
  void chance_d1000_jump_attack_set(int v);
  void chance_d1000_jump_on_low_hp_set(int v);
  void chance_d1000_jump_onto_set(int v);
  void chance_d1000_jump_randomly_set(int v);
  void chance_d1000_melting_set(int v);
  void chance_d1000_regenerate_set(int v);
  void chance_d1000_shooting_avoid_friends_set(int v);
  void chance_d1000_shooting_set(int v);
  void chance_d1000_shove_set(int v);
  void chance_d1000_steal_item_set(int v);
  void chance_d1000_tameable_set(int v);
  void chance_d1000_teleport_attack_set(int v);
  void chance_d1000_teleport_self_set(int v);
  void charge_count_set(int v);
  void collision_attack_set(int v);
  void collision_check_set(int v);
  void collision_hit_180_set(int v);
  void collision_hit_360_set(int v);
  void collision_hit_adj_set(int v);
  void collision_hit_priority_set(int v);
  void collision_hit_two_tiles_ahead_set(int v);
  void consume_per_bite_amount_set(int v);
  void distance_avoid_set(int v);
  void distance_leader_max_set(int v);
  void distance_minion_from_mob_max_set(int v);
  void distance_minion_vision_shared_set(int v);
  void distance_recruitment_max_set(int v);
  void distance_spell_cast_set(int v);
  void distance_throw_set(int v);
  void distance_vision_set(int v);
  void dmg_num_of_attacks_set(int v);
  void dmg_received_doubled_from_acid_set(int v);
  void dmg_received_doubled_from_cold_set(int v);
  void dmg_received_doubled_from_fire_set(int v);
  void dmg_received_doubled_from_necrosis_set(int v);
  void dmg_received_doubled_from_poison_set(int v);
  void dmg_received_doubled_from_water_set(int v);
  void effect_has_blast_radius_set(int v);
  void effect_radius_set(int v);
  void enchant_level_set(int v);
  void enchant_max_set(int v);
  void environ_dislikes_acid_set(int v);
  void environ_dislikes_cold_set(int v);
  void environ_dislikes_fire_set(int v);
  void environ_dislikes_necrosis_set(int v);
  void environ_dislikes_poison_set(int v);
  void environ_dislikes_water_set(int v);
  void environ_hates_acid_set(int v);
  void environ_hates_cold_set(int v);
  void environ_hates_fire_set(int v);
  void environ_hates_necrosis_set(int v);
  void environ_hates_poison_set(int v);
  void environ_hates_water_set(int v);
  void environ_likes_deep_water_set(int v);
  void environ_likes_lava_set(int v);
  void environ_likes_shallow_water_set(int v);
  void equip_carry_anim_set(const std::string &v);
  void gfx_anim_use_set(const std::string &v);
  void gfx_ascii_animated_set(int v);
  void gfx_ascii_bg_color_spread_alpha_set(int v);
  void gfx_ascii_bg_color_spread_blue_set(int v);
  void gfx_ascii_bg_color_spread_green_set(int v);
  void gfx_ascii_bg_color_spread_hue_set(int v);
  void gfx_ascii_bg_color_spread_red_set(int v);
  void gfx_ascii_color_bg_unchanged_by_lights_set(int v);
  void gfx_ascii_color_fg_unchanged_by_lights_set(int v);
  void gfx_ascii_color_is_animated_set(int v);
  void gfx_ascii_fade_with_dist_set(int v);
  void gfx_ascii_fg_color_spread_alpha_set(int v);
  void gfx_ascii_fg_color_spread_blue_set(int v);
  void gfx_ascii_fg_color_spread_green_set(int v);
  void gfx_ascii_fg_color_spread_hue_set(int v);
  void gfx_ascii_fg_color_spread_red_set(int v);
  void gfx_ascii_shown_as_gray_in_shadow_set(int v);
  void gfx_ascii_shown_in_bg_set(int v);
  void gfx_ascii_shown_set(int v);
  void gfx_glows_set(int v);
  void gfx_on_fire_anim_set(int v);
  void gfx_ooze_set(int v);
  void gfx_pixelart_animated_can_hflip_set(int v);
  void gfx_pixelart_animated_can_vflip_set(int v);
  void gfx_pixelart_animated_no_dir_set(int v);
  void gfx_pixelart_animated_set(int v);
  void gfx_pixelart_anim_synced_with_owner_set(int v);
  void gfx_pixelart_attack_anim_set(int v);
  void gfx_pixelart_bounce_always_set(int v);
  void gfx_pixelart_bounce_on_move_set(int v);
  void gfx_pixelart_equip_carry_anim_set(int v);
  void gfx_pixelart_flickers_set(int v);
  void gfx_pixelart_health_bar_autohide_set(int v);
  void gfx_pixelart_health_bar_only_when_awake_set(int v);
  void gfx_pixelart_health_bar_shown_set(int v);
  void gfx_pixelart_oversized_and_centered_set(int v);
  void gfx_pixelart_oversized_and_on_floor_set(int v);
  void gfx_pixelart_reflection_set(int v);
  void gfx_pixelart_shadow_long_set(int v);
  void gfx_pixelart_shadow_set(int v);
  void gfx_pixelart_shadow_short_set(int v);
  void gfx_pixelart_shadow_solid_set(int v);
  void gfx_pixelart_shadow_very_short_set(int v);
  void gfx_pixelart_show_asleep_anim_set(int v);
  void gfx_pixelart_show_highlighted_set(int v);
  void gfx_pixelart_shown_in_bg_set(int v);
  void gfx_pixelart_show_outlined_set(int v);
  void gfx_pixelart_show_square_outlined_set(int v);
  void gfx_pixelart_submergible_set(int v);
  void gfx_pixelart_wobbles_when_hit_set(int v);
  void gfx_targeted_laser_set(const std::string &v);
  void gfx_targeted_projectile_set(const std::string &v);
  void gfx_targeted_radial_set(const std::string &v);
  void gfx_water_set(int v);
  void has_tentacles_set(int v);
  void hunger_clock_tick_freq_set(int v);
  void hunger_is_hunger_level_hungry_at_pct_set(int v);
  void hunger_is_hunger_level_starving_at_pct_set(int v);
  void hunger_is_insatiable_set(int v);
  void internal_has_dir_anim_set(int v);
  void internal_has_hp_anim_set(int v);
  void is_able_to_amplify_footsteps_set(int v);
  void is_able_to_attack_mobs_set(int v);
  void is_able_to_attack_owner_set(int v);
  void is_able_to_attack_totems_set(int v);
  void is_able_to_be_equipped_set(int v);
  void is_able_to_be_resurrected_set(int v);
  void is_able_to_be_surprised_set(int v);
  void is_able_to_be_teleported_set(int v);
  void is_able_to_break_down_doors_set(int v);
  void is_able_to_break_out_of_ice_set(int v);
  void is_able_to_break_out_of_spell_of_holding_set(int v);
  void is_able_to_break_out_of_webs_set(int v);
  void is_able_to_change_levels_set(int v);
  void is_able_to_collect_keys_set(int v);
  void is_able_to_dampen_footsteps_set(int v);
  void is_able_to_eat_poisonous_food_set(int v);
  void is_able_to_eat_rotting_food_set(int v);
  void is_able_to_eat_unpleasant_food_set(int v);
  void is_able_to_enchant_items_set(int v);
  void is_able_to_fall_set(int v);
  void is_able_to_follow_set(int v);
  void is_able_to_freeze_set(int v);
  void is_able_to_grapple_set(int v);
  void is_able_to_have_a_runic_inscribed_set(int v);
  void is_able_to_jump_attack_set(int v);
  void is_able_to_jump_escape_set(int v);
  void is_able_to_jump_onto_set(int v);
  void is_able_to_jump_set(int v);
  void is_able_to_jump_without_tiring_set(int v);
  void is_able_to_learn_skills_set(int v);
  void is_able_to_learn_spells_set(int v);
  void is_able_to_live_out_of_water_set(int v);
  void is_able_to_lunge_set(int v);
  void is_able_to_melt_set(int v);
  void is_able_to_move_diagonally_set(int v);
  void is_able_to_open_doors_set(int v);
  void is_able_to_rage_set(int v);
  void is_able_to_regenerate_set(int v);
  void is_able_to_rest_set(int v);
  void is_able_to_run_away_after_stealing_set(int v);
  void is_able_to_see_in_magical_darkness_set(int v);
  void is_able_to_see_in_the_dark_set(int v);
  void is_able_to_see_invisible_set(int v);
  void is_able_to_see_through_doors_set(int v);
  void is_able_to_shoot_at_close_range_set(int v);
  void is_able_to_shoot_at_set(int v);
  void is_able_to_shove_set(int v);
  void is_able_to_sleep_set(int v);
  void is_able_to_spawn_things_set(int v);
  void is_able_to_spell_cast_set(int v);
  void is_able_to_swim_set(int v);
  void is_able_to_teleport_attack_set(int v);
  void is_able_to_teleport_escape_set(int v);
  void is_able_to_teleport_self_set(int v);
  void is_able_to_teleport_without_tiring_set(int v);
  void is_able_to_tire_set(int v);
  void is_able_to_use_amulet_set(int v);
  void is_able_to_use_armor_set(int v);
  void is_able_to_use_boots_set(int v);
  void is_able_to_use_cloak_set(int v);
  void is_able_to_use_gauntlet_set(int v);
  void is_able_to_use_helmet_set(int v);
  void is_able_to_use_ranged_weapons_set(int v);
  void is_able_to_use_rings_set(int v);
  void is_able_to_use_shield_set(int v);
  void is_able_to_use_staffs_set(int v);
  void is_able_to_use_weapons_set(int v);
  void is_able_to_walk_through_walls_set(int v);
  void is_acid_set(int v);
  void is_aerodynamic_set(int v);
  void is_air_breather_set(int v);
  void is_alive_on_end_of_anim_set(int v);
  void is_allied_with_set(const std::string &v);
  void is_always_activated_set(int v);
  void is_always_hit_set(int v);
  void is_always_submerged_in_lava_set(int v);
  void is_always_submerged_in_water_set(int v);
  void is_amulet_set(int v);
  void is_animation_set(int v);
  void is_ant_set(int v);
  void is_aquatic_set(int v);
  void is_armor_set(int v);
  void is_ascend_dungeon_set(int v);
  void is_ascend_sewer_set(int v);
  void is_asleep_initially_set(int v);
  void is_attackable_by_magic_set(int v);
  void is_attackable_by_monst_set(int v);
  void is_attackable_by_player_set(int v);
  void is_auto_activated_set(int v);
  void is_auto_collect_item_set(int v);
  void is_auto_equipped_set(int v);
  void is_auto_throw_set(int v);
  void is_auto_use_set(int v);
  void is_bag_item_container_set(int v);
  void is_bag_item_not_stackable_set(int v);
  void is_bag_item_set(int v);
  void is_bag_set(int v);
  void is_barrel_set(int v);
  void is_basalt_set(int v);
  void is_bearowl_set(int v);
  void is_bee_set(int v);
  void is_biome_chasms_set(int v);
  void is_biome_dungeon_set(int v);
  void is_biome_flooded_set(int v);
  void is_biome_ice_set(int v);
  void is_biome_lava_set(int v);
  void is_biome_sewer_set(int v);
  void is_biome_swamp_set(int v);
  void is_biome_unused_set(int v);
  void is_bleeder_set(int v);
  void is_block_of_ice_set(int v);
  void is_bloodbug_set(int v);
  void is_bones_set(int v);
  void is_boots_set(int v);
  void is_brazier_set(int v);
  void is_bridge_set(int v);
  void is_brittle_set(int v);
  void is_buff_set(int v);
  void is_burnable_set(int v);
  void is_carnivorous_plant_set(int v);
  void is_cautious_set(int v);
  void is_centipede_set(int v);
  void is_chasm_set(int v);
  void is_cloak_set(int v);
  void is_cold_elemental_set(int v);
  void is_cold_set(int v);
  void is_collectable_set(int v);
  void is_collected_as_gold_set(int v);
  void is_collected_as_keys_set(int v);
  void is_combustible_set(int v);
  void is_corpse_on_death_set(int v);
  void is_corpse_with_bones_set(int v);
  void is_corridor_set(int v);
  void is_cowardly_set(int v);
  void is_crab_set(int v);
  void is_critical_to_level_set(int v);
  void is_crushable_set(int v);
  void is_crystalline_set(int v);
  void is_crystal_set(int v);
  void is_cursor_can_hover_over_needs_confirm_set(int v);
  void is_cursor_can_hover_over_set(int v);
  void is_cursor_path_blocker_set(int v);
  void is_cursor_path_hazard_set(int v);
  void is_cursor_path_set(int v);
  void is_cursor_set(int v);
  void is_dagger_set(int v);
  void is_daring_set(int v);
  void is_dead_on_end_of_anim_set(int v);
  void is_dead_on_falling_set(int v);
  void is_dead_on_shove_set(int v);
  void is_death_hornet_set(int v);
  void is_debuff_set(int v);
  void is_debug_path_set(int v);
  void is_debug_type_set(int v);
  void is_deep_water_set(int v);
  void is_demon_set(int v);
  void is_descend_dungeon_set(int v);
  void is_descend_sewer_set(int v);
  void is_described_in_leftbar_set(int v);
  void is_described_when_hovering_over_set(int v);
  void is_destroyed_on_hit_or_miss_set(int v);
  void is_destroyed_on_hitting_set(int v);
  void is_dirt_set(int v);
  void is_dog_set(int v);
  void is_door_set(int v);
  void is_drinkable_set(int v);
  void is_droppable_set(int v);
  void is_duck_set(int v);
  void is_eater_of_amulets_set(int v);
  void is_eater_of_armor_set(int v);
  void is_eater_of_blood_set(int v);
  void is_eater_of_boots_set(int v);
  void is_eater_of_cloaks_set(int v);
  void is_eater_of_foliage_set(int v);
  void is_eater_of_food_set(int v);
  void is_eater_of_fungus_set(int v);
  void is_eater_of_gauntlets_set(int v);
  void is_eater_of_grass_set(int v);
  void is_eater_of_green_blood_set(int v);
  void is_eater_of_helmets_set(int v);
  void is_eater_of_magical_items_set(int v);
  void is_eater_of_meat_set(int v);
  void is_eater_of_plants_set(int v);
  void is_eater_of_potions_set(int v);
  void is_eater_of_red_blood_set(int v);
  void is_eater_of_rings_set(int v);
  void is_eater_of_shields_set(int v);
  void is_eater_of_slime_set(int v);
  void is_eater_of_staffs_set(int v);
  void is_eater_of_treasure_set(int v);
  void is_eater_of_weapons_set(int v);
  void is_enchantable_as_a_group_set(int v);
  void is_enchantable_set(int v);
  void is_enchantstone_set(int v);
  void is_engulfer_set(int v);
  void is_ethereal_mob_set(int v);
  void is_ethereal_set(int v);
  void is_ettin_set(int v);
  void is_exit_finder_set(int v);
  void is_explorer_set(int v);
  void is_explosion_set(int v);
  void is_fairy_set(int v);
  void is_fearless_set(int v);
  void is_fire_elemental_set(int v);
  void is_firefox_set(int v);
  void is_fire_set(int v);
  void is_flat_set(int v);
  void is_floating_set(int v);
  void is_floor_deco_set(int v);
  void is_floor_set(int v);
  void is_flying_set(int v);
  void is_foliage_set(int v);
  void is_food_set(int v);
  void is_four_leaf_clover_set(int v);
  void is_fungus_edible_set(int v);
  void is_fungus_healing_set(int v);
  void is_fungus_poison_set(int v);
  void is_fungus_set(int v);
  void is_fungus_withered_set(int v);
  void is_gas_blocker_set(int v);
  void is_gas_explosion_blocker_set(int v);
  void is_gauntlet_set(int v);
  void is_gelatinous_set(int v);
  void is_glass_set(int v);
  void is_gnome_set(int v);
  void is_goat_set(int v);
  void is_gold_set(int v);
  void is_golem_set(int v);
  void is_grass_dead_set(int v);
  void is_grass_dry_set(int v);
  void is_grass_dry_trampled_set(int v);
  void is_grass_set(int v);
  void is_grass_trampled_set(int v);
  void is_grass_wet_set(int v);
  void is_grass_wet_trampled_set(int v);
  void is_green_blooded_set(int v);
  void is_green_blood_set(int v);
  void is_green_splatter_set(int v);
  void is_hard_set(int v);
  void is_hazard_set(int v);
  void is_health_booster_set(int v);
  void is_heavy_set(int v);
  void is_hellpup_set(int v);
  void is_helmet_set(int v);
  void is_herbivore_set(int v);
  void is_hittable_set(int v);
  void is_holy_set(int v);
  void is_holy_water_set(int v);
  void is_humanoid_set(int v);
  void is_iceman_set(int v);
  void is_immune_to_acid_set(int v);
  void is_immune_to_blinding_set(int v);
  void is_immune_to_cold_set(int v);
  void is_immune_to_confusion_set(int v);
  void is_immune_to_electricity_set(int v);
  void is_immune_to_fire_set(int v);
  void is_immune_to_lightning_set(int v);
  void is_immune_to_magic_drain_set(int v);
  void is_immune_to_necrosis_set(int v);
  void is_immune_to_negation_set(int v);
  void is_immune_to_paralysis_set(int v);
  void is_immune_to_poison_set(int v);
  void is_immune_to_spell_of_beckoning_set(int v);
  void is_immune_to_spell_of_holding_set(int v);
  void is_immune_to_spell_of_repulsion_set(int v);
  void is_immune_to_spell_of_slowing_set(int v);
  void is_immune_to_spiderwebs_set(int v);
  void is_immune_to_stamina_drain_set(int v);
  void is_immune_to_teleport_attack_set(int v);
  void is_immune_to_water_set(int v);
  void is_intelligent_set(int v);
  void is_interesting_set(int v);
  void is_internal_set(int v);
  void is_invisible_set(int v);
  void is_item_carrier_set(int v);
  void is_item_collector_set(int v);
  void is_item_organic_set(int v);
  void is_item_set(int v);
  void is_item_targeted_set(int v);
  void is_kept_after_final_use_set(int v);
  void is_key_set(int v);
  void is_key_special_set(int v);
  void is_laser_set(int v);
  void is_lava_set(int v);
  void is_leech_set(int v);
  void is_lifeless_set(int v);
  void is_light_blocker_for_monst_set(int v);
  void is_light_blocker_set(int v);
  void is_lightning_set(int v);
  void is_light_set(int v);
  void is_limb_set(int v);
  void is_living_set(int v);
  void is_loggable_set(int v);
  void is_mace_set(int v);
  void is_made_of_rock_set(int v);
  void is_magical_effect_set(int v);
  void is_magical_set(int v);
  void is_magic_stone_set(int v);
  void is_mantisman_set(int v);
  void is_map_beast_set(int v);
  void is_map_treasure_set(int v);
  void is_meat_set(int v);
  void is_metal_set(int v);
  void is_mimic_set(int v);
  void is_minion_set(int v);
  void is_missile_set(int v);
  void is_mob_class_A_set(int v);
  void is_mob_class_B_set(int v);
  void is_mob_class_C_set(int v);
  void is_mob_set(int v);
  void is_molekin_set(int v);
  void is_monst_class_A_set(int v);
  void is_monst_class_B_set(int v);
  void is_monst_class_C_set(int v);
  void is_monst_class_D_set(int v);
  void is_monst_class_E_set(int v);
  void is_monst_pack_set(int v);
  void is_monst_set(int v);
  void is_moveable_set(int v);
  void is_msg_allowed_hears_something_set(int v);
  void is_msg_allowed_is_dead_set(int v);
  void is_msg_allowed_is_seen_set(int v);
  void is_msg_allowed_is_surprised_set(int v);
  void is_msg_allowed_is_wounded_set(int v);
  void is_msg_allowed_senses_danger_set(int v);
  void is_msg_set(int v);
  void is_mummy_set(int v);
  void is_necrotic_danger_level_set(int v);
  void is_no_tile_set(int v);
  void is_not_shown_as_a_pet_set(int v);
  void is_obj_spawning_monst_set(int v);
  void is_obj_spawning_set(int v);
  void is_obs_ai_set(int v);
  void is_obs_destructable_set(int v);
  void is_obsidian_set(int v);
  void is_obs_jump_end_set(int v);
  void is_obs_jumping_set(int v);
  void is_obs_shooting_set(int v);
  void is_obs_shoving_set(int v);
  void is_obs_spawn_monst_set(int v);
  void is_obs_spawn_set(int v);
  void is_obs_spell_casting_set(int v);
  void is_obs_throwing_set(int v);
  void is_obs_wall_or_door_set(int v);
  void is_obs_when_dead_set(int v);
  void is_ogre_set(int v);
  void is_one_per_tile_set(int v);
  void is_ooze_set(int v);
  void is_openable_set(int v);
  void is_organic_set(int v);
  void is_pillar_set(int v);
  void is_piranha_set(int v);
  void is_plant_set(int v);
  void is_player_bodypart_eyes_set(int v);
  void is_player_bodypart_face_set(int v);
  void is_player_bodypart_hair_set(int v);
  void is_player_bodypart_hat_set(int v);
  void is_player_bodypart_legs_set(int v);
  void is_player_bodypart_set(int v);
  void is_player_bodypart_torso_set(int v);
  void is_player_set(int v);
  void is_pointy_set(int v);
  void is_poisonous_danger_level_set(int v);
  void is_portal_set(int v);
  void is_potion_set(int v);
  void is_pressure_plate_set(int v);
  void is_projectile_set(int v);
  void is_ranged_weapon_set(int v);
  void is_rat_set(int v);
  void is_red_blooded_set(int v);
  void is_red_blood_set(int v);
  void is_red_splatter_set(int v);
  void is_removable_if_out_of_slots_set(int v);
  void is_ring_set(int v);
  void is_ripple_set(int v);
  void is_rock_ice_set(int v);
  void is_rock_lava_set(int v);
  void is_rock_set(int v);
  void is_runic_set(int v);
  void is_rusty_set(int v);
  void is_scorpion_set(int v);
  void is_secret_door_set(int v);
  void is_sewer_wall_set(int v);
  void is_shallow_water_set(int v);
  void is_sheep_set(int v);
  void is_shield_set(int v);
  void is_shootable_set(int v);
  void is_shovable_and_sticky_set(int v);
  void is_shovable_set(int v);
  void is_skeleton_set(int v);
  void is_skill_set(int v);
  void is_skillstone_set(int v);
  void is_slime_set(int v);
  void is_slippery_set(int v);
  void is_smoke_set(int v);
  void is_snake_set(int v);
  void is_soft_set(int v);
  void is_spectral_blade_set(int v);
  void is_spellbook_set(int v);
  void is_spell_of_beckoning_set(int v);
  void is_spell_of_holding_barrier_set(int v);
  void is_spell_of_holding_set(int v);
  void is_spell_of_protection_barrier_set(int v);
  void is_spell_of_repulsion_set(int v);
  void is_spell_of_slowing_set(int v);
  void is_spell_set(int v);
  void is_spider_set(int v);
  void is_spiderweb_set(int v);
  void is_splatter_set(int v);
  void is_staff_set(int v);
  void is_steam_set(int v);
  void is_sticky_set(int v);
  void is_stone_set(int v);
  void is_swimmer_set(int v);
  void is_sword_set(int v);
  void is_tameable_set(int v);
  void is_target_radial_set(int v);
  void is_target_select_set(int v);
  void is_tentacle_set(int v);
  void is_tentacleye_set(int v);
  void is_the_grid_set(int v);
  void is_thief_set(int v);
  void is_throwable_set(int v);
  void is_thrown_as_a_weapon_set(int v);
  void is_thylacine_set(int v);
  void is_tickable_set(int v);
  void is_tireless_set(int v);
  void is_tmp_thing_set(int v);
  void is_torch_set(int v);
  void is_totem_set(int v);
  void is_trap_set(int v);
  void is_treasure_chest_set(int v);
  void is_treasure_class_A_set(int v);
  void is_treasure_class_B_set(int v);
  void is_treasure_class_C_set(int v);
  void is_treasure_set(int v);
  void is_treasure_type_set(int v);
  void is_troll_set(int v);
  void is_turret_set(int v);
  void is_undead_set(int v);
  void is_unused_flag10_set(int v);
  void is_unused_flag11_set(int v);
  void is_unused_flag124_set(int v);
  void is_unused_flag12_set(int v);
  void is_unused_flag13_set(int v);
  void is_unused_flag142_set(int v);
  void is_unused_flag14_set(int v);
  void is_unused_flag15_set(int v);
  void is_unused_flag16_set(int v);
  void is_unused_flag179_set(int v);
  void is_unused_flag17_set(int v);
  void is_unused_flag18_set(int v);
  void is_unused_flag192_set(int v);
  void is_unused_flag19_set(int v);
  void is_unused_flag1_set(int v);
  void is_unused_flag20_set(int v);
  void is_unused_flag21_set(int v);
  void is_unused_flag22_set(int v);
  void is_unused_flag23_set(int v);
  void is_unused_flag24_set(int v);
  void is_unused_flag25_set(int v);
  void is_unused_flag26_set(int v);
  void is_unused_flag27_set(int v);
  void is_unused_flag28_set(int v);
  void is_unused_flag29_set(int v);
  void is_unused_flag2_set(int v);
  void is_unused_flag30_set(int v);
  void is_unused_flag31_set(int v);
  void is_unused_flag32_set(int v);
  void is_unused_flag33_set(int v);
  void is_unused_flag34_set(int v);
  void is_unused_flag35_set(int v);
  void is_unused_flag36_set(int v);
  void is_unused_flag37_set(int v);
  void is_unused_flag38_set(int v);
  void is_unused_flag39_set(int v);
  void is_unused_flag3_set(int v);
  void is_unused_flag40_set(int v);
  void is_unused_flag41_set(int v);
  void is_unused_flag42_set(int v);
  void is_unused_flag43_set(int v);
  void is_unused_flag44_set(int v);
  void is_unused_flag45_set(int v);
  void is_unused_flag46_set(int v);
  void is_unused_flag47_set(int v);
  void is_unused_flag48_set(int v);
  void is_unused_flag49_set(int v);
  void is_unused_flag4_set(int v);
  void is_unused_flag50_set(int v);
  void is_unused_flag51_set(int v);
  void is_unused_flag52_set(int v);
  void is_unused_flag53_set(int v);
  void is_unused_flag54_set(int v);
  void is_unused_flag55_set(int v);
  void is_unused_flag56_set(int v);
  void is_unused_flag57_set(int v);
  void is_unused_flag58_set(int v);
  void is_unused_flag59_set(int v);
  void is_unused_flag5_set(int v);
  void is_unused_flag60_set(int v);
  void is_unused_flag61_set(int v);
  void is_unused_flag62_set(int v);
  void is_unused_flag63_set(int v);
  void is_unused_flag64_set(int v);
  void is_unused_flag65_set(int v);
  void is_unused_flag66_set(int v);
  void is_unused_flag67_set(int v);
  void is_unused_flag68_set(int v);
  void is_unused_flag69_set(int v);
  void is_unused_flag6_set(int v);
  void is_unused_flag70_set(int v);
  void is_unused_flag71_set(int v);
  void is_unused_flag72_set(int v);
  void is_unused_flag73_set(int v);
  void is_unused_flag7_set(int v);
  void is_unused_flag8_set(int v);
  void is_unused_flag9_set(int v);
  void is_usable_only_after_equipping_set(int v);
  void is_usable_set(int v);
  void is_used_when_thrown_set(int v);
  void is_very_combustible_set(int v);
  void is_very_hard_set(int v);
  void is_very_heavy_set(int v);
  void is_very_intelligent_set(int v);
  void is_wall_dungeon_set(int v);
  void is_wall_set(int v);
  void is_warhammer_set(int v);
  void is_weapon_class_A_set(int v);
  void is_weapon_class_B_set(int v);
  void is_weapon_class_C_set(int v);
  void is_weapon_set(int v);
  void is_wooden_set(int v);
  void is_yeti_set(int v);
  void is_zorblin_set(int v);
  void item_height_set(int v);
  void item_width_set(int v);
  void jump_distance_bonus_set(int v);
  void jump_distance_set(int v);
  void light_color_set(const std::string &v);
  void light_dist_set(int v);
  void magic_drain_on_using_set(int v);
  void magic_set(int v);
  void minion_limit_set(int v);
  void move_speed_bonus_set(int v);
  void move_speed_set(int v);
  void name_set(const std::string &v);
  void noise_additional_on_jump_end_set(int v);
  void noise_additional_on_teleporting_set(int v);
  void noise_blocker_set(int v);
  void noise_decibels_hearing_set(int v);
  void noise_on_born_set(int v);
  void noise_on_dropping_set(int v);
  void noise_on_hit_and_now_dead_set(int v);
  void noise_on_hit_and_still_alive_set(int v);
  void noise_on_moving_set(int v);
  void noise_on_open_or_close_set(int v);
  void normal_placement_rules_set(int v);
  void on_activated_do_set(const std::string &v);
  void on_attacking_dmg_acid_do_set(const std::string &v);
  void on_attacking_dmg_bite_do_set(const std::string &v);
  void on_attacking_dmg_claw_do_set(const std::string &v);
  void on_attacking_dmg_cold_do_set(const std::string &v);
  void on_attacking_dmg_crush_do_set(const std::string &v);
  void on_attacking_dmg_digest_do_set(const std::string &v);
  void on_attacking_dmg_drown_do_set(const std::string &v);
  void on_attacking_dmg_energy_do_set(const std::string &v);
  void on_attacking_dmg_fire_do_set(const std::string &v);
  void on_attacking_dmg_heat_do_set(const std::string &v);
  void on_attacking_dmg_impact_do_set(const std::string &v);
  void on_attacking_dmg_lightning_do_set(const std::string &v);
  void on_attacking_dmg_magic_do_set(const std::string &v);
  void on_attacking_dmg_melee_do_set(const std::string &v);
  void on_attacking_dmg_missile_do_set(const std::string &v);
  void on_attacking_dmg_nat_att_do_set(const std::string &v);
  void on_attacking_dmg_necrosis_do_set(const std::string &v);
  void on_attacking_dmg_negation_do_set(const std::string &v);
  void on_attacking_dmg_poison_do_set(const std::string &v);
  void on_attacking_dmg_stamina_do_set(const std::string &v);
  void on_attacking_dmg_stat_att_do_set(const std::string &v);
  void on_attacking_dmg_stat_con_do_set(const std::string &v);
  void on_attacking_dmg_stat_str_do_set(const std::string &v);
  void on_attacking_dmg_water_do_set(const std::string &v);
  void on_awake_do_set(const std::string &v);
  void on_born_do_set(const std::string &v);
  void on_close_do_set(const std::string &v);
  void on_death_do_set(const std::string &v);
  void on_death_drop_all_items_set(int v);
  void on_death_is_open_set(int v);
  void on_death_is_stone_set(int v);
  void on_death_of_a_follower_do_set(const std::string &v);
  void on_death_of_my_leader_do_set(const std::string &v);
  void on_dropped_do_set(const std::string &v);
  void on_enchant_do_set(const std::string &v);
  void on_enter_do_set(const std::string &v);
  void on_equip_do_set(const std::string &v);
  void on_fall_begin_do_set(const std::string &v);
  void on_fall_do_set(const std::string &v);
  void on_final_use_do_set(const std::string &v);
  void on_get_text_description_long_do_set(const std::string &v);
  void on_hit_and_now_dead_do_set(const std::string &v);
  void on_hit_and_still_alive_do_set(const std::string &v);
  void on_hit_dodge_do_set(const std::string &v);
  void on_jump_do_set(const std::string &v);
  void on_lifespan_tick_do_set(const std::string &v);
  void on_move_do_set(const std::string &v);
  void on_open_do_set(const std::string &v);
  void on_owner_add_do_set(const std::string &v);
  void on_owner_attack_dmg_acid_do_set(const std::string &v);
  void on_owner_attack_dmg_bite_do_set(const std::string &v);
  void on_owner_attack_dmg_claw_do_set(const std::string &v);
  void on_owner_attack_dmg_cold_do_set(const std::string &v);
  void on_owner_attack_dmg_crush_do_set(const std::string &v);
  void on_owner_attack_dmg_digest_do_set(const std::string &v);
  void on_owner_attack_dmg_drown_do_set(const std::string &v);
  void on_owner_attack_dmg_energy_do_set(const std::string &v);
  void on_owner_attack_dmg_fire_do_set(const std::string &v);
  void on_owner_attack_dmg_heat_do_set(const std::string &v);
  void on_owner_attack_dmg_impact_do_set(const std::string &v);
  void on_owner_attack_dmg_lightning_do_set(const std::string &v);
  void on_owner_attack_dmg_magic_do_set(const std::string &v);
  void on_owner_attack_dmg_melee_do_set(const std::string &v);
  void on_owner_attack_dmg_missile_do_set(const std::string &v);
  void on_owner_attack_dmg_nat_att_do_set(const std::string &v);
  void on_owner_attack_dmg_necrosis_do_set(const std::string &v);
  void on_owner_attack_dmg_negation_do_set(const std::string &v);
  void on_owner_attack_dmg_poison_do_set(const std::string &v);
  void on_owner_attack_dmg_stamina_do_set(const std::string &v);
  void on_owner_attack_dmg_stat_att_do_set(const std::string &v);
  void on_owner_attack_dmg_stat_con_do_set(const std::string &v);
  void on_owner_attack_dmg_stat_str_do_set(const std::string &v);
  void on_owner_attack_dmg_water_do_set(const std::string &v);
  void on_owner_receive_dmg_acid_do_set(const std::string &v);
  void on_owner_receive_dmg_bite_do_set(const std::string &v);
  void on_owner_receive_dmg_claw_do_set(const std::string &v);
  void on_owner_receive_dmg_cold_do_set(const std::string &v);
  void on_owner_receive_dmg_crush_do_set(const std::string &v);
  void on_owner_receive_dmg_digest_do_set(const std::string &v);
  void on_owner_receive_dmg_drown_do_set(const std::string &v);
  void on_owner_receive_dmg_energy_do_set(const std::string &v);
  void on_owner_receive_dmg_fire_do_set(const std::string &v);
  void on_owner_receive_dmg_heat_do_set(const std::string &v);
  void on_owner_receive_dmg_impact_do_set(const std::string &v);
  void on_owner_receive_dmg_lightning_do_set(const std::string &v);
  void on_owner_receive_dmg_magic_do_set(const std::string &v);
  void on_owner_receive_dmg_melee_do_set(const std::string &v);
  void on_owner_receive_dmg_missile_do_set(const std::string &v);
  void on_owner_receive_dmg_nat_att_do_set(const std::string &v);
  void on_owner_receive_dmg_necrosis_do_set(const std::string &v);
  void on_owner_receive_dmg_negation_do_set(const std::string &v);
  void on_owner_receive_dmg_poison_do_set(const std::string &v);
  void on_owner_receive_dmg_stamina_do_set(const std::string &v);
  void on_owner_receive_dmg_stat_att_do_set(const std::string &v);
  void on_owner_receive_dmg_stat_con_do_set(const std::string &v);
  void on_owner_receive_dmg_stat_str_do_set(const std::string &v);
  void on_owner_receive_dmg_water_do_set(const std::string &v);
  void on_owner_unset_do_set(const std::string &v);
  void on_polymorphed_do_set(const std::string &v);
  void on_pre_teleport_do_set(const std::string &v);
  void on_receiving_dmg_acid_do_set(const std::string &v);
  void on_receiving_dmg_bite_do_set(const std::string &v);
  void on_receiving_dmg_claw_do_set(const std::string &v);
  void on_receiving_dmg_cold_do_set(const std::string &v);
  void on_receiving_dmg_crush_do_set(const std::string &v);
  void on_receiving_dmg_digest_do_set(const std::string &v);
  void on_receiving_dmg_drown_do_set(const std::string &v);
  void on_receiving_dmg_energy_do_set(const std::string &v);
  void on_receiving_dmg_fire_do_set(const std::string &v);
  void on_receiving_dmg_heat_do_set(const std::string &v);
  void on_receiving_dmg_impact_do_set(const std::string &v);
  void on_receiving_dmg_lightning_do_set(const std::string &v);
  void on_receiving_dmg_magic_do_set(const std::string &v);
  void on_receiving_dmg_melee_do_set(const std::string &v);
  void on_receiving_dmg_missile_do_set(const std::string &v);
  void on_receiving_dmg_nat_att_do_set(const std::string &v);
  void on_receiving_dmg_necrosis_do_set(const std::string &v);
  void on_receiving_dmg_negation_do_set(const std::string &v);
  void on_receiving_dmg_poison_do_set(const std::string &v);
  void on_receiving_dmg_stamina_do_set(const std::string &v);
  void on_receiving_dmg_stat_att_do_set(const std::string &v);
  void on_receiving_dmg_stat_con_do_set(const std::string &v);
  void on_receiving_dmg_stat_str_do_set(const std::string &v);
  void on_receiving_dmg_water_do_set(const std::string &v);
  void on_resting_do_set(const std::string &v);
  void on_stealing_do_set(const std::string &v);
  void on_stuck_do_set(const std::string &v);
  void on_swing_do_set(const std::string &v);
  void on_targeted_do_set(const std::string &v);
  void on_targeted_radially_do_set(const std::string &v);
  void on_teleport_do_set(const std::string &v);
  void on_thrown_do_set(const std::string &v);
  void on_tick_do_set(const std::string &v);
  void on_tick_when_activated_do_set(const std::string &v);
  void on_tick_when_deactivated_do_set(const std::string &v);
  void on_unequip_do_set(const std::string &v);
  void on_use_do_set(const std::string &v);
  void on_use_skill_do_set(const std::string &v);
  void on_waiting_do_set(const std::string &v);
  void on_want_to_shoot_at_do_set(const std::string &v);
  void on_you_are_declared_a_follower_do_set(const std::string &v);
  void on_you_are_declared_leader_do_set(const std::string &v);
  void on_you_are_on_fire_do_set(const std::string &v);
  void on_you_nat_attack_attempt_do_set(const std::string &v);
  void on_you_nat_attack_success_do_set(const std::string &v);
  void range_max_set(int v);
  void rarity_set(int v);
  void shove_bonus_set(int v);
  void shove_strength_set(int v);
  void skill_base_name_set(const std::string &v);
  void skill_replaces_set(const std::string &v);
  void spawn_group_radius_set(int v);
  void spawn_on_shoved_set(const std::string &v);
  void spell_base_name_set(const std::string &v);
  void spell_cost_set(int v);
  void spell_replaces_set(const std::string &v);
  void stamina_drain_on_attacking_set(int v);
  void stamina_drain_on_using_set(int v);
  void stamina_set(int v);
  void stat_att_bonus_set(int v);
  void stat_att_penalty_when_idle_max_set(int v);
  void stat_att_penalty_when_idle_set(int v);
  void stat_att_penalty_when_in_deep_water_set(int v);
  void stat_att_penalty_when_in_shallow_water_set(int v);
  void stat_att_penalty_when_stuck_max_set(int v);
  void stat_att_penalty_when_stuck_set(int v);
  void stat_att_set(int v);
  void stat_con_bonus_set(int v);
  void stat_con_set(int v);
  void stat_def_bonus_set(int v);
  void stat_def_penalty_when_idle_max_set(int v);
  void stat_def_penalty_when_idle_set(int v);
  void stat_def_penalty_when_in_deep_water_set(int v);
  void stat_def_penalty_when_in_shallow_water_set(int v);
  void stat_def_penalty_when_stuck_max_set(int v);
  void stat_def_penalty_when_stuck_set(int v);
  void stat_def_set(int v);
  void stat_dex_bonus_set(int v);
  void stat_dex_set(int v);
  void stat_int_bonus_set(int v);
  void stat_int_set(int v);
  void stat_luck_bonus_set(int v);
  void stat_luck_set(int v);
  void stat_psi_bonus_set(int v);
  void stat_psi_set(int v);
  void stats02_set(int v);
  void stats03_set(int v);
  void stats04_set(int v);
  void stats05_set(int v);
  void stats06_set(int v);
  void stats07_set(int v);
  void stats09_set(int v);
  void stat_str_bonus_set(int v);
  void stat_str_min_set(int v);
  void stat_str_set(int v);
  void stat_thv_bonus_set(int v);
  void stat_thv_set(int v);
  void str1_set(const std::string &v);
  void str2_set(const std::string &v);
  void str4_set(const std::string &v);
  void teleport_distance_set(int v);
  void temperature_max_set(int v);
  void temperature_min_set(int v);
  void temperature_never_changes_set(int v);
  void temperature_sensitive_set(int v);
  void temperature_sensitive_to_sudden_changes_set(int v);
  void temperature_set(int v);
  void text_a_or_an_set(const std::string &v);
  void text_debuff_set(const std::string &v);
  void text_description_enchant_set(const std::string &v);
  void text_description_long2_set(const std::string &v);
  void text_description_long3_set(const std::string &v);
  void text_description_long4_set(const std::string &v);
  void text_description_long5_set(const std::string &v);
  void text_description_long_set(const std::string &v);
  void text_description_short_set(const std::string &v);
  void text_description_very_short_set(const std::string &v);
  void text_hits_set(const std::string &v);
  void text_long_name_set(const std::string &v);
  void text_real_name_set(const std::string &v);
  void text_short_name_set(const std::string &v);
  void text_title_set(const std::string &v);
  void text_unused1_set(const std::string &v);
  void text_unused2_set(const std::string &v);
  void text_unused3_set(const std::string &v);
  void text_unused_set(const std::string &v);
  void thing_size_set(int v);
  void tick_prio_set(int v);
  void unused_chance1_d1000_set(int v);
  void unused_chance2_d1000_set(int v);
  void unused_chance3_d1000_set(int v);
  void unused_chance4_d1000_set(int v);
  void unused_chance5_d1000_set(int v);
  void unused_chance6_d1000_set(int v);
  void weapon_dmg_set(int v);
  void weapon_use_distance_set(int v);
  void z_depth_set(int v);
  void z_prio_set(int v);
  // end sort marker5 }

  void dmg_chance_d1000_water_set(int index, int v);
  void dmg_chance_d1000_acid_set(int index, int v);
  void dmg_chance_d1000_cold_set(int index, int v);
  void dmg_chance_d1000_crush_set(int index, int v);
  void dmg_chance_d1000_impact_set(int index, int v);
  void dmg_chance_d1000_missile_set(int index, int v);
  void dmg_chance_d1000_digest_set(int index, int v);
  void dmg_chance_d1000_energy_set(int index, int v);
  void dmg_chance_d1000_negation_set(int index, int v);
  void dmg_chance_d1000_fire_set(int index, int v);
  void dmg_chance_d1000_heat_set(int index, int v);
  void dmg_chance_d1000_drown_set(int index, int v);
  void dmg_chance_d1000_bite_set(int index, int v);
  void dmg_chance_d1000_claw_set(int index, int v);
  void dmg_chance_d1000_lightning_set(int index, int v);
  void dmg_chance_d1000_melee_set(int index, int v);
  void dmg_chance_d1000_nat_att_set(int index, int v);
  void dmg_chance_d1000_necrosis_set(int index, int v);
  void dmg_chance_d1000_stamina_drain_set(int index, int v);
  void dmg_chance_d1000_magic_drain_set(int index, int v);
  void dmg_chance_d1000_poison_set(int index, int v);

  inline int gfx_pixelart_animated(void) const { return _gfx_pixelart_animated; }
};

std::vector< class Tp * > tp_find_wildcard(const std::string &name);
std::vector< class Tp * > tp_find_wildcard(Levelp, point p, const std::string &name);

class Tp *string2tp(const char **s);
class Tp *string2tp(const std::string &s, int *len);
class Tp *string2tp(const std::wstring &s, int *len);
class Tp *tp_find(const std::string &name);
class Tp *tp_find(uint32_t id);
class Tp *tp_load(int id, const std::string &file, const std::string &long_name, const std::string &sh_name);
class Tp *tp_random_ascend_dungeon(void);
class Tp *tp_random_ascend_sewer(void);
class Tp *tp_random_bodypart(int bodypart);
class Tp *tp_random_barrel(void);
class Tp *tp_random_bones(void);
class Tp *tp_random_zorblin(void);
class Tp *tp_random_brazier(void);
class Tp *tp_random_deco(void);
class Tp *tp_random_descend_dungeon(void);
class Tp *tp_random_descend_sewer(void);
class Tp *tp_random_dirt(void);
class Tp *tp_random_door(void);
class Tp *tp_random_grass_dry(void);
class Tp *tp_random_fungus_healing(void);
class Tp *tp_random_fungus_withered(void);
class Tp *tp_random_fungus_edible(void);
class Tp *tp_random_fungus_poison(void);
class Tp *tp_random_magic_stone(void);
class Tp *tp_random_ethereal_mob(void);
class Tp *tp_random_floor(void);
class Tp *tp_random_foliage(void);
class Tp *tp_random_food(void);
class Tp *tp_random_runic(void);
class Tp *tp_random_gold(void);
class Tp *tp_random_green_blood(void);
class Tp *tp_random_green_splatter(void);
class Tp *tp_random_item_class_A(void);
class Tp *tp_random_item_class_B(void);
class Tp *tp_random_item_class_C(void);
class Tp *tp_random_monst_class_A(void);
class Tp *tp_random_monst_class_B(void);
class Tp *tp_random_monst_class_C(void);
class Tp *tp_random_monst_class_D(void);
class Tp *tp_random_monst_class_E(void);
class Tp *tp_random_item_not_a_container_class_A(void);
class Tp *tp_random_item_not_a_container_class_B(void);
class Tp *tp_random_item_not_a_container_class_C(void);
class Tp *tp_random_key(void);
class Tp *tp_random_mob_class_A(void);
class Tp *tp_random_mob_class_B(void);
class Tp *tp_random_mob_class_C(void);
class Tp *tp_random_trap(void);
class Tp *tp_random_potion(void);
class Tp *tp_random_red_blood(void);
class Tp *tp_random_red_splatter(void);
class Tp *tp_random_ring_class_A(void);
class Tp *tp_random_ring_class_B(void);
class Tp *tp_random_ring_class_C(void);
class Tp *tp_random_ring(void);
class Tp *tp_random_small_ripple(void);
class Tp *tp_random_large_ripple(void);
class Tp *tp_random_rock(void);
class Tp *tp_random_secret_door(void);
class Tp *tp_random_sewer_wall(void);
class Tp *tp_random_spiderweb(void);
class Tp *tp_random_portal(void);
class Tp *tp_random_treasure_class_A(void);
class Tp *tp_random_treasure_class_B(void);
class Tp *tp_random_treasure_class_C(void);
class Tp *tp_random_treasure(void);
class Tp *tp_random_wall_dungeon(void);
class Tp *tp_random_staff_class_A(void);
class Tp *tp_random_staff_class_B(void);
class Tp *tp_random_staff_class_C(void);
class Tp *tp_random_staff(void);
class Tp *tp_random_weapon_class_A(void);
class Tp *tp_random_weapon_class_B(void);
class Tp *tp_random_weapon_class_C(void);
class Tp *tp_random_weapon(void);
class Tp *tp_random_grass_wet(void);

class Tp *tp_get_next_bodypart(int which, const std::string &curr);
class Tp *tp_get_prev_bodypart(int which, const std::string &curr);

const Tpidmap &tp_get_skills(void);
const Tpidmap &tp_get_spells(void);

Tilep tp_first_tile(class Tp *);

Tpp tp_get_with_rarity_filter(Tpidmap &m);

uint8_t tp_init(void);

void tp_assign_allies(void);
void tp_monst_add(Tpp tp);
void tp_fini(void);
void tp_fixup(void);
void tp_get_id(const std::string &tp_name, int *id);
void tp_random_init(void);
void tp_dump_monsters(void);
void tp_dump_weapons(void);

enum {
  THING_DIR_NONE,
  THING_DIR_DOWN,
  THING_DIR_UP,
  THING_DIR_LEFT,
  THING_DIR_RIGHT,
  THING_DIR_TL,
  THING_DIR_BL,
  THING_DIR_TR,
  THING_DIR_BR,
};

extern Tpidmap   tp_id_map;
extern Tpnamemap tp_name_map;

#endif // THING_TEMPLATE_H
