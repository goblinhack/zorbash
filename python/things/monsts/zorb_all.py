import my
import tp


def on_you_natural_attack(me, x, y):
    sound = f"growl{my.non_pcg_randint(1, 10)}"
    if not my.thing_sound_play_channel(me, my.CHANNEL_MONST, sound):
        my.thing_sound_play_channel(me, my.CHANNEL_MONST_DEATH, sound)


def on_you_are_hit_but_still_alive(me, hitter, real_hitter, x, y, crit, damage):
    sound = f"hiss{my.non_pcg_randint(1, 10)}"
    if not my.thing_sound_play_channel(me, my.CHANNEL_MONST, sound):
        my.thing_sound_play_channel(me, my.CHANNEL_MONST_DEATH, sound)


def on_you_miss_do(me, hitter, x, y):
    sound = f"hiss{my.non_pcg_randint(1, 10)}"
    if not my.thing_sound_play_channel(me, my.CHANNEL_MONST, sound):
        my.thing_sound_play_channel(me, my.CHANNEL_MONST_DEATH, sound)


def on_death(me, x, y):
    if not my.thing_sound_play_channel(me, my.CHANNEL_MONST, "monst_death1"):
        my.thing_sound_play_channel(me, my.CHANNEL_MONST_DEATH, "monst_death1")


def tp_init(name, text_name):
    mytp = tp.Tp(name, text_name)
    my.tp_set_aggression_level_pct(mytp, 75)
    my.tp_set_ai_detect_secret_doors(mytp, True)
    my.tp_set_ai_resent_count(mytp, 20)
    my.tp_set_ai_shove_chance_d1000(mytp, 500)
    my.tp_set_ai_wanderer(mytp, True)
    my.tp_set_attack_eater(mytp, True)
    my.tp_set_attack_lunge(mytp, True)
    my.tp_set_attack_meat(mytp, True)
    my.tp_set_attack_undead(mytp, True)
    my.tp_set_capacity_height(mytp, 10)
    my.tp_set_capacity_width(mytp, 10)
    my.tp_set_collateral_damage_pct(mytp, 50)
    my.tp_set_collision_check(mytp, True)
    my.tp_set_collision_hit_priority(mytp, 10)
    my.tp_set_collision_hit_priority(mytp, 6)
    my.tp_set_damage_natural_attack_type(mytp, "claw")
    my.tp_set_damage_natural_dice(mytp, "1d4+2")
    my.tp_set_distance_avoid(mytp, 5)
    my.tp_set_distance_jump(mytp, 3)
    my.tp_set_distance_leader_max(mytp, 5)
    my.tp_set_distance_recruitment_max(mytp, 7)
    my.tp_set_distance_vision(mytp, 7)
    my.tp_set_environ_avoids_acid(mytp, 100)
    my.tp_set_environ_avoids_fire(mytp, 10)
    my.tp_set_environ_avoids_poison(mytp, 100)
    my.tp_set_gfx_animated_can_hflip(mytp, True)
    my.tp_set_gfx_animated(mytp, True)
    my.tp_set_gfx_anim_use(mytp, "attack_claws")
    my.tp_set_gfx_bounce_on_move(mytp, True)
    my.tp_set_gfx_health_bar_shown(mytp, True)
    my.tp_set_gfx_short_shadow_caster(mytp, True)
    my.tp_set_gfx_show_asleep(mytp, True)
    my.tp_set_gfx_show_outlined(mytp, True)
    my.tp_set_health_initial_dice(mytp, "2d6")
    my.tp_set_hunger_clock_tick_frequency(mytp, 50)
    my.tp_set_hunger_health_pct(mytp, 95)
    my.tp_set_is_able_to_attack_mobs(mytp, True)
    my.tp_set_is_able_to_break_down_doors(mytp, True)
    my.tp_set_is_able_to_break_out_of_webs(mytp, True)
    my.tp_set_is_able_to_change_levels(mytp, True)
    my.tp_set_is_able_to_collect_keys(mytp, True)
    my.tp_set_is_able_to_enchant_items(mytp, True)
    my.tp_set_is_able_to_fall(mytp, True)
    my.tp_set_is_able_to_follow(mytp, True)
    my.tp_set_is_able_to_jump(mytp, True)
    my.tp_set_is_able_to_learn_skills(mytp, True)
    my.tp_set_is_able_to_move_diagonally(mytp, True)
    my.tp_set_is_able_to_open_doors(mytp, True)
    my.tp_set_is_able_to_see_in_the_dark(mytp, True)
    my.tp_set_is_able_to_shove(mytp, True)
    my.tp_set_is_able_to_sleep(mytp, True)
    my.tp_set_is_able_to_tire(mytp, True)
    my.tp_set_is_able_to_use_amulet(mytp, True)
    my.tp_set_is_able_to_use_boots(mytp, True)
    my.tp_set_is_able_to_use_cloak(mytp, True)
    my.tp_set_is_able_to_use_gauntlet(mytp, True)
    my.tp_set_is_able_to_use_rings(mytp, True)
    my.tp_set_is_able_to_use_wands(mytp, True)
    my.tp_set_is_attackable_by_monst(mytp, True)
    my.tp_set_is_attackable_by_player(mytp, True)
    my.tp_set_is_biome_dungeon(mytp, True)
    my.tp_set_is_bleeder(mytp, True)
    my.tp_set_is_bony(mytp, True)
    my.tp_set_is_breather(mytp, True)
    my.tp_set_is_burnable(mytp, True)
    my.tp_set_is_corpse_on_death(mytp, True)
    my.tp_set_is_crushable(mytp, True)
    my.tp_set_is_described_when_hovering_over(mytp, True)
    my.tp_set_is_explorer(mytp, True)
    my.tp_set_is_green_blooded(mytp, True)
    my.tp_set_is_hittable(mytp, True)
    my.tp_set_is_humanoid(mytp, True)
    my.tp_set_is_item_carrier(mytp, True)
    my.tp_set_is_item_collector(mytp, True)
    my.tp_set_is_living(mytp, True)
    my.tp_set_is_loggable(mytp, True)
    my.tp_set_is_meat(mytp, True)
    my.tp_set_is_monst(mytp, True)
    my.tp_set_is_moveable(mytp, True)
    my.tp_set_is_shovable(mytp, True)
    my.tp_set_is_steal_item_chance_d1000(mytp, 50)
    my.tp_set_is_tickable(mytp, True)
    my.tp_set_long_text_description(mytp, "A very lesser minion of Zorbash, Zorblins are small, green skinned beings that lair in caves, abandoned mines, despoiled dungeons and other dismal settings, otherwise known as their homes. They spend their time defending their natural habitat from invading marauders like you. However, they usually carry some meagre amounts of gold, dug out from the depths with their bare, shaking hands. Best to find out...")
    my.tp_set_monst_size(mytp, my.MONST_SIZE_NORMAL)
    my.tp_set_noise_decibels_hearing(mytp, 10)
    my.tp_set_noise_on_moving_or_being_carried(mytp, 5)
    my.tp_set_normal_placement_rules(mytp, True)
    my.tp_set_on_death_do(mytp, "zorb_all.on_death()")
    my.tp_set_on_death_drop_all_items(mytp, True)
    my.tp_set_on_you_are_hit_but_still_alive_do(mytp, "zorb_all.on_you_are_hit_but_still_alive()")
    my.tp_set_on_you_miss_do(mytp, "zorb_all.on_you_miss_do()")
    my.tp_set_on_you_natural_attack_do(mytp, "zorb_all.on_you_natural_attack()")
    my.tp_set_rarity(mytp, my.RARITY_COMMON)
    my.tp_set_stamina(mytp, 100)
    my.tp_set_stat_att_penalty_when_idle(mytp, 0)
    my.tp_set_stat_att_penalty_when_idle_max(mytp, 0)
    my.tp_set_stat_att_penalty_when_in_deep_water(mytp, 5)
    my.tp_set_stat_att_penalty_when_in_shallow_water(mytp, 2)
    my.tp_set_stat_att_penalty_when_stuck(mytp, 5)
    my.tp_set_stat_att_penalty_when_stuck_max(mytp, 5)
    my.tp_set_stat_con(mytp, 10)
    my.tp_set_stat_def(mytp, 10)
    my.tp_set_stat_def_penalty_when_idle(mytp, 5)
    my.tp_set_stat_def_penalty_when_idle_max(mytp, 5)
    my.tp_set_stat_def_penalty_when_in_deep_water(mytp, 5)
    my.tp_set_stat_def_penalty_when_in_shallow_water(mytp, 2)
    my.tp_set_stat_def_penalty_when_stuck(mytp, 10)
    my.tp_set_stat_def_penalty_when_stuck_max(mytp, 15)
    my.tp_set_stat_dex(mytp, 10)
    my.tp_set_stat_luck(mytp, 10)
    my.tp_set_stat_str(mytp, 8)
    my.tp_set_text_a_or_an(mytp, "a")
    my.tp_set_text_hits(mytp, "claws")
    my.tp_set_z_depth(mytp, my.MAP_DEPTH_OBJ)
    my.tp_set_z_prio(mytp, my.MAP_PRIO_NORMAL)
    return mytp
